[["index.html", "Hydraulics and Water Resources: Examples Using R Preface Copyight", " Hydraulics and Water Resources: Examples Using R Ed Maurer Professor, Civil, Environmental, and Sustainable Engineering Department, Santa Clara University 2023-01-27 Preface This is a compilation of various R exercises and examples created over many years. They have been used mostly in undergraduate civil engineering classes including fluid mechanics, hydraulics, and water resources. This is a dynamic work, and will be regularly updated as errors are identified, improved presentation is developed, or new topics or examples are introduced. I welcome any suggestions or comments. In what follows, text will be intentionally brief. More extensive discussion and description can be found in any fluid mechanics, applied hydraulics, or water resources engineering text. Symbology in this reference generally follows that Finnemore and Franzini (2002). Fundamental equations will be introduced though the emphasis will be on applications to solve common problems. Also, since this is written by a civil engineer, the only fluids included are water and air, since that accounts for nearly all problems encountered in the field. Solving water problems is rarely done by hand calculations, though the importance of performing order of magnitude ‘back of the envelope’ calculations cannot be overstated. Whether using a hand calculator, spreadsheet, or a programming language to produce a solution, having a sense of when an answer is an outlier will help catch errors. Scripting languages are powerful tools for performing calculations, providing a fully traceable and reproducible path from your input to a solution. Open source languages have the benefit of being free to use, and invite users to be part of a community helping improve the language and its capabilities. The language of choice for this book is R (R Core Team 2022), chosen for its straightforward syntax, powerful graphical capabilities, wide use in engineering and in many other disciplines, and by using the RStudio interface, it can look and feel a lot like Matlab® with which most engineering students have some experience. No introduction to R or RStudio is provided here. It is assumed that the reader has installed R (and RStudio), is comfortable installing and updating packages, and understands the basics of R scripting. A brief overview is provided here, aimed at students at Santa Clara University. More comprehensive materials are readily available, including An Introduction to R by the R Core Team. An excellent set of materials for a course Introduction to Programming with R by Stauffer et al. is also freely available and includes interactive exercises. As I developed these exercises and text, I learned R through the work of many others, and the excellent help offered by skilled people sharing their knowledge on stackoverflow. The methods shown here are not the only ways to solve these problems, and users are invited to share alternative or better solutions. Copyight This work is provided under a Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0). As a summary, this license allows reusers to distribute, remix, adapt, and build upon the material in any medium or format for noncommercial purposes only, and only so long as attribution is given to the creator. This is a summary of (and not a substitute for) the license. "],["units-in-fluid-mechanics.html", "Chapter 1 Units in Fluid Mechanics", " Chapter 1 Units in Fluid Mechanics Before beginning with problem solving methods it helps to recall some important quantities in fluid mechanics and their associated units. While the world has generally moved forward into standardizing the use of the SI unit system, the U.S. stubbornly holds onto the antiquated US (sometimes called the British Gravitational, BG) system. This means practicing engineers must be familiar with both systems, and be able to convert between the two systems. These important quantities are shown in Table 1.1. Table 1.1: Dimensions and units for common quantities. Quantity Symbol Dimensions US (or BG) Units SI Units US to SI multiply by Length L \\(L\\) \\(ft\\) \\(m\\) 0.3048 Acceleration a \\(LT^{-2}\\) \\(ft/s^2\\) \\(m/s^{2}\\) 0.3048 Mass m \\(M\\) \\(slug\\) \\(kg\\) 14.59 Force F \\(F\\) \\(lb\\) \\(N\\) 4.448 Density \\(\\rho\\) \\(ML^{-3}\\) \\(slug/ft^3\\) \\(kg/m^3\\) 515.4 Energy/Work FL \\({ft}\\cdot{lb}\\) \\({N}\\cdot{m}=joule (J)\\) 1.356 Flowrate Q \\(L^{3}/T\\) \\(ft^{3}/s\\)=cfs \\(m^{3}/s\\) 0.02832 Kinematic viscocity \\(\\nu\\) \\(L^{2}/T\\) \\(ft^{2}/s\\) \\(m^{2}/s\\) 0.0929 Power \\(FLT^{-1}\\) \\({ft}\\cdot{lb/s}\\) \\({N}\\cdot{m/s}=watt (W)\\) 1.356 Pressure p \\(FL^{-2}\\) \\(lb/in^2=psi\\) \\(N/m^2=Pa\\) 6895 Specific Weight \\(\\gamma\\) \\(FL^{-3}\\) \\(lb/ft^3\\) \\(N/m^3\\) 157.1 Velocity V \\(LT^{-1}\\) \\(ft/s\\) \\(m/s\\) 0.3048 (Dynamic) Viscocity \\(\\mu\\) \\(FTL^{-2}\\) \\({lb}\\cdot{s/ft^2}\\) \\({N}\\cdot{s/m^2}={Pa}\\cdot{s}\\) 47.88 Volume \\(\\forall\\) \\(L^3\\) \\(ft^3\\) \\(m^3\\) 0.02832 There are many other units that must be accommodated. For example, one may encounter the poise to describe (dynamic) viscosity (\\(1~Pa*s = 10~poise\\)), or the stoke for kinematic viscocity (\\(1~m^2/s=10^4~stokes\\)). Many hydraulic systems use gallons per minute (gpm) as a unit of flow (\\(1~ft^3/s=448.8~gpm\\)), and larger water systems often use millions of gallons per day (mgd) (\\(1~mgd = 1.547~ft^3/s\\)). For volume, the SI system often uses liters (\\(l\\)) instead of \\(m^3\\) (\\(1~m^3=1000~l\\)). One regular conversion that needs to occur is the translation between mass (m) and weight (W), where \\(W=mg\\), where \\(g\\) is gravitational acceleration on the earth’s surface: \\(g=9.81~m/s^2=32.2~ft/s^2\\). When working with forces (such as with momentum problems or hydrostatic forces) be sure to work with weights/forces, not mass. It is straightforward to use conversion factors in the table to manipulate values between the systems, multiplying by the factor shown to go from US to SI units, or dividing to do the \\[{1*10^{-6}~m^2/s}*\\frac{1 ~ft^2/s}{0.0929~m^2/s}=1.076*10^{-5} ~ft^2/s\\] Another example converts between two quantities in the US system: 100 gallons per minute to cfs: \\[{100 ~gpm}*\\frac{1 ~cfs}{448.8 ~gpm}=0.223 ~cfs\\] The units package in R can do these conversions and more, and also checks that conversions are permissible (producing an error if incompatible units are used). units::units_options(set_units_mode = &quot;symbols&quot;) Q_gpm &lt;- units::set_units(100, gallon/min) Q_gpm #&gt; 100 [gallon/min] Q_cfs &lt;- units::set_units(Q_gpm, ft^3/s) Q_cfs #&gt; 0.2228009 [ft^3/s] Repeating the unit conversion of viscosity using the units package: Example 1.1 Convert kinematic viscosity from SI to Eng units. nu &lt;- units::set_units(1e-6, m^2/s) nu #&gt; 1e-06 [m^2/s] units::set_units(nu, ft^2/s) #&gt; 1.076391e-05 [ft^2/s] The units package also produces correct units during operations. For example, multiplying mass by g should produce weight. Example 1.2 Using the units package to produce correct units during mathematical operations. #If you travel at 88 ft/sec for 1 hour, how many km would you travel? v &lt;- units::set_units(88, ft/s) t &lt;- units::set_units(1, hour) d &lt;- v*t d #&gt; 316800 [ft] units::set_units(d, km) #&gt; 96.56064 [km] #What is the weight of a 4 slug mass, in pounds and Newtons? m &lt;- units::set_units(4, slug) g &lt;- units::set_units(32.2, ft/s^2) w &lt;- m*g #Notice the units are technically correct, but have not been simplified in this case w #&gt; 128.8 [ft*slug/s^2] #These can be set manually to verify that lbf (pound-force) is a valid equivalent units::set_units(w, lbf) #&gt; 128.8 [lbf] units::set_units(w, N) #&gt; 572.9308 [N] "],["properties-of-water.html", "Chapter 2 Properties of water (and air) 2.1 Properties important for water standing still 2.2 Properties important for moving water 2.3 Atmosperic Properties", " Chapter 2 Properties of water (and air) Fundamental properties of water allow the description of the forces it exerts and how it behaves while in motion. Many were listed in Chapter . A summary of basic water properties, which vary with temperature, is shown in Table 2.1 for SI units and Table 2.2 for US (or Eng) units. Table 2.1: Water properties in SI units Temp Density Spec_Weight Viscosity Kinem_Visc Sat_VP Surf_Tens Bulk_Mod C kg m-3 N m-3 N s m-2 m2 s-1 Pa N m-1 Pa \\(0\\) \\(999.9\\) \\({9.809}\\times 10^{3}\\) \\({1.734}\\times 10^{-3}\\) \\({1.734}\\times 10^{-6}\\) \\(611.2\\) \\({75.7}\\times 10^{-3}\\) \\({2.02}\\times 10^{9}\\) \\(5\\) \\(1000\\) \\({9.810}\\times 10^{3}\\) \\({1.501}\\times 10^{-3}\\) \\({1.501}\\times 10^{-6}\\) \\(872.6\\) \\({74.9}\\times 10^{-3}\\) \\({2.06}\\times 10^{9}\\) \\(10\\) \\(999.7\\) \\({9.807}\\times 10^{3}\\) \\({1.310}\\times 10^{-3}\\) \\({1.311}\\times 10^{-6}\\) \\({1.228}\\times 10^{3}\\) \\({74.2}\\times 10^{-3}\\) \\({2.10}\\times 10^{9}\\) \\(15\\) \\(999.1\\) \\({9.801}\\times 10^{3}\\) \\({1.153}\\times 10^{-3}\\) \\({1.154}\\times 10^{-6}\\) \\({1.706}\\times 10^{3}\\) \\({73.5}\\times 10^{-3}\\) \\({2.14}\\times 10^{9}\\) \\(20\\) \\(998.2\\) \\({9.793}\\times 10^{3}\\) \\({1.021}\\times 10^{-3}\\) \\({1.023}\\times 10^{-6}\\) \\({2.339}\\times 10^{3}\\) \\({72.7}\\times 10^{-3}\\) \\({2.18}\\times 10^{9}\\) \\(25\\) \\(997.1\\) \\({9.781}\\times 10^{3}\\) \\({910.8}\\times 10^{-6}\\) \\({913.5}\\times 10^{-9}\\) \\({3.170}\\times 10^{3}\\) \\({72.0}\\times 10^{-3}\\) \\({2.22}\\times 10^{9}\\) \\(30\\) \\(995.7\\) \\({9.768}\\times 10^{3}\\) \\({817.4}\\times 10^{-6}\\) \\({821.0}\\times 10^{-9}\\) \\({4.247}\\times 10^{3}\\) \\({71.2}\\times 10^{-3}\\) \\({2.25}\\times 10^{9}\\) \\(35\\) \\(994.1\\) \\({9.752}\\times 10^{3}\\) \\({738.0}\\times 10^{-6}\\) \\({742.4}\\times 10^{-9}\\) \\({5.629}\\times 10^{3}\\) \\({70.4}\\times 10^{-3}\\) \\({2.26}\\times 10^{9}\\) \\(40\\) \\(992.2\\) \\({9.734}\\times 10^{3}\\) \\({669.9}\\times 10^{-6}\\) \\({675.1}\\times 10^{-9}\\) \\({7.385}\\times 10^{3}\\) \\({69.6}\\times 10^{-3}\\) \\({2.28}\\times 10^{9}\\) \\(45\\) \\(990.2\\) \\({9.714}\\times 10^{3}\\) \\({611.2}\\times 10^{-6}\\) \\({617.3}\\times 10^{-9}\\) \\({9.595}\\times 10^{3}\\) \\({68.8}\\times 10^{-3}\\) \\({2.28}\\times 10^{9}\\) \\(50\\) \\(988.1\\) \\({9.693}\\times 10^{3}\\) \\({560.5}\\times 10^{-6}\\) \\({567.2}\\times 10^{-9}\\) \\({12.35}\\times 10^{3}\\) \\({67.9}\\times 10^{-3}\\) \\({2.29}\\times 10^{9}\\) \\(55\\) \\(985.7\\) \\({9.670}\\times 10^{3}\\) \\({516.2}\\times 10^{-6}\\) \\({523.7}\\times 10^{-9}\\) \\({15.76}\\times 10^{3}\\) \\({67.1}\\times 10^{-3}\\) \\({2.28}\\times 10^{9}\\) \\(60\\) \\(983.2\\) \\({9.645}\\times 10^{3}\\) \\({477.6}\\times 10^{-6}\\) \\({485.7}\\times 10^{-9}\\) \\({19.95}\\times 10^{3}\\) \\({66.2}\\times 10^{-3}\\) \\({2.28}\\times 10^{9}\\) \\(65\\) \\(980.6\\) \\({9.619}\\times 10^{3}\\) \\({443.5}\\times 10^{-6}\\) \\({452.3}\\times 10^{-9}\\) \\({25.04}\\times 10^{3}\\) \\({65.4}\\times 10^{-3}\\) \\({2.26}\\times 10^{9}\\) \\(70\\) \\(977.7\\) \\({9.592}\\times 10^{3}\\) \\({413.5}\\times 10^{-6}\\) \\({422.9}\\times 10^{-9}\\) \\({31.20}\\times 10^{3}\\) \\({64.5}\\times 10^{-3}\\) \\({2.25}\\times 10^{9}\\) \\(75\\) \\(974.8\\) \\({9.563}\\times 10^{3}\\) \\({386.9}\\times 10^{-6}\\) \\({396.9}\\times 10^{-9}\\) \\({38.60}\\times 10^{3}\\) \\({63.6}\\times 10^{-3}\\) \\({2.22}\\times 10^{9}\\) \\(80\\) \\(971.7\\) \\({9.533}\\times 10^{3}\\) \\({363.1}\\times 10^{-6}\\) \\({373.7}\\times 10^{-9}\\) \\({47.42}\\times 10^{3}\\) \\({62.7}\\times 10^{-3}\\) \\({2.20}\\times 10^{9}\\) \\(85\\) \\(968.5\\) \\({9.501}\\times 10^{3}\\) \\({341.9}\\times 10^{-6}\\) \\({353.0}\\times 10^{-9}\\) \\({57.87}\\times 10^{3}\\) \\({61.8}\\times 10^{-3}\\) \\({2.17}\\times 10^{9}\\) \\(90\\) \\(965.2\\) \\({9.468}\\times 10^{3}\\) \\({322.9}\\times 10^{-6}\\) \\({334.5}\\times 10^{-9}\\) \\({70.18}\\times 10^{3}\\) \\({60.8}\\times 10^{-3}\\) \\({2.14}\\times 10^{9}\\) \\(95\\) \\(961.7\\) \\({9.434}\\times 10^{3}\\) \\({305.7}\\times 10^{-6}\\) \\({317.9}\\times 10^{-9}\\) \\({84.61}\\times 10^{3}\\) \\({59.9}\\times 10^{-3}\\) \\({2.10}\\times 10^{9}\\) \\(100\\) \\(958.1\\) \\({9.399}\\times 10^{3}\\) \\({290.2}\\times 10^{-6}\\) \\({302.9}\\times 10^{-9}\\) \\({101.4}\\times 10^{3}\\) \\({58.9}\\times 10^{-3}\\) \\({2.07}\\times 10^{9}\\) Table 2.2: Water properties in US units Temp Density Spec_Weight Viscosity Kinem_Visc Sat_VP Surf_Tens Bulk_Mod F slug ft-3 lbf ft-3 lbf s ft-2 ft2 s-1 lbf ft-2 lbf ft-1 lbf ft-2 \\(32\\) \\(1.938\\) \\(62.42\\) \\({36.21}\\times 10^{-6}\\) \\({18.73}\\times 10^{-6}\\) \\(12.77\\) \\({5.18}\\times 10^{-3}\\) \\({42.2}\\times 10^{6}\\) \\(42\\) \\(1.939\\) \\(62.43\\) \\({30.87}\\times 10^{-6}\\) \\({15.96}\\times 10^{-6}\\) \\(18.94\\) \\({5.13}\\times 10^{-3}\\) \\({43.1}\\times 10^{6}\\) \\(52\\) \\(1.938\\) \\(62.40\\) \\({26.58}\\times 10^{-6}\\) \\({13.75}\\times 10^{-6}\\) \\(27.62\\) \\({5.07}\\times 10^{-3}\\) \\({44.0}\\times 10^{6}\\) \\(62\\) \\(1.937\\) \\(62.36\\) \\({23.11}\\times 10^{-6}\\) \\({11.96}\\times 10^{-6}\\) \\(39.64\\) \\({5.02}\\times 10^{-3}\\) \\({45.0}\\times 10^{6}\\) \\(72\\) \\(1.934\\) \\(62.29\\) \\({20.26}\\times 10^{-6}\\) \\({10.50}\\times 10^{-6}\\) \\(56.00\\) \\({4.96}\\times 10^{-3}\\) \\({45.9}\\times 10^{6}\\) \\(82\\) \\(1.932\\) \\(62.20\\) \\({17.90}\\times 10^{-6}\\) \\({9.290}\\times 10^{-6}\\) \\(77.99\\) \\({4.90}\\times 10^{-3}\\) \\({46.7}\\times 10^{6}\\) \\(92\\) \\(1.928\\) \\(62.09\\) \\({15.94}\\times 10^{-6}\\) \\({8.286}\\times 10^{-6}\\) \\(107.2\\) \\({4.84}\\times 10^{-3}\\) \\({47.2}\\times 10^{6}\\) \\(102\\) \\(1.925\\) \\(61.97\\) \\({14.29}\\times 10^{-6}\\) \\({7.443}\\times 10^{-6}\\) \\(145.3\\) \\({4.78}\\times 10^{-3}\\) \\({47.5}\\times 10^{6}\\) \\(112\\) \\(1.920\\) \\(61.83\\) \\({12.89}\\times 10^{-6}\\) \\({6.732}\\times 10^{-6}\\) \\(194.7\\) \\({4.72}\\times 10^{-3}\\) \\({47.7}\\times 10^{6}\\) \\(122\\) \\(1.916\\) \\(61.68\\) \\({11.71}\\times 10^{-6}\\) \\({6.126}\\times 10^{-6}\\) \\(258.0\\) \\({4.66}\\times 10^{-3}\\) \\({47.8}\\times 10^{6}\\) \\(132\\) \\(1.911\\) \\(61.52\\) \\({10.69}\\times 10^{-6}\\) \\({5.608}\\times 10^{-6}\\) \\(338.1\\) \\({4.59}\\times 10^{-3}\\) \\({47.7}\\times 10^{6}\\) \\(142\\) \\(1.905\\) \\(61.34\\) \\({9.808}\\times 10^{-6}\\) \\({5.162}\\times 10^{-6}\\) \\(438.5\\) \\({4.53}\\times 10^{-3}\\) \\({47.5}\\times 10^{6}\\) \\(152\\) \\(1.899\\) \\(61.16\\) \\({9.046}\\times 10^{-6}\\) \\({4.775}\\times 10^{-6}\\) \\(563.2\\) \\({4.46}\\times 10^{-3}\\) \\({47.2}\\times 10^{6}\\) \\(162\\) \\(1.893\\) \\(60.96\\) \\({8.381}\\times 10^{-6}\\) \\({4.438}\\times 10^{-6}\\) \\(716.9\\) \\({4.39}\\times 10^{-3}\\) \\({46.8}\\times 10^{6}\\) \\(172\\) \\(1.887\\) \\(60.75\\) \\({7.797}\\times 10^{-6}\\) \\({4.144}\\times 10^{-6}\\) \\(904.5\\) \\({4.32}\\times 10^{-3}\\) \\({46.2}\\times 10^{6}\\) \\(182\\) \\(1.880\\) \\(60.53\\) \\({7.283}\\times 10^{-6}\\) \\({3.884}\\times 10^{-6}\\) \\({1.132}\\times 10^{3}\\) \\({4.25}\\times 10^{-3}\\) \\({45.5}\\times 10^{6}\\) \\(192\\) \\(1.873\\) \\(60.30\\) \\({6.828}\\times 10^{-6}\\) \\({3.655}\\times 10^{-6}\\) \\({1.405}\\times 10^{3}\\) \\({4.18}\\times 10^{-3}\\) \\({44.8}\\times 10^{6}\\) \\(202\\) \\(1.865\\) \\(60.06\\) \\({6.423}\\times 10^{-6}\\) \\({3.452}\\times 10^{-6}\\) \\({1.731}\\times 10^{3}\\) \\({4.11}\\times 10^{-3}\\) \\({44.0}\\times 10^{6}\\) \\(212\\) \\(1.858\\) \\(59.81\\) \\({6.061}\\times 10^{-6}\\) \\({3.271}\\times 10^{-6}\\) \\({2.118}\\times 10^{3}\\) \\({4.04}\\times 10^{-3}\\) \\({43.2}\\times 10^{6}\\) What follows is a brief discussion of some of these properties, and how they can be applied in R. All of the properties shown in the tables above are produced using the hydraulics R package. The documentation for that package provides details on its use. The water property functions in the hydraulics package can be called using the ret_units input to allow it to return an object of class units, as designated by the package units. This enables capabilities for new units to be deduced as operations are performed on the values. Concise examples are in the vignettes for the ‘units’ package. 2.1 Properties important for water standing still An intrinsic property of water is its mass. In the presence of gravity, it exerts a weight on its surroundings. Forces caused by the weight of water enter design in many ways. Example 2.1 uses water mass and weight in a calculation. Example 2.1 Determine the tension in the 8 mm diameter rope holding a bucket containing 12 liters of water. Ignore the weight of the bucket. Assume a water temperature of 20 \\(^\\circ\\)C. rho = hydraulics::dens(T = 20, units = &#39;SI&#39;, ret_units = TRUE) #Water density: rho #&gt; 998.2336 [kg/m^3] #Find mass by multiplying by volume vol &lt;- units::set_units(12, liter) m &lt;- rho * vol #Convert mass to weight in Newtons g &lt;- units::set_units(9.81, m/s^2) w &lt;- units::set_units(m*g, &quot;N&quot;) #Divide by cross-sectional area of the rope to obtain tension area &lt;- units::set_units(pi/4 * 8^2, mm^2) tension &lt;- w/area #Express the result in Pascals units::set_units(tension, Pa) #&gt; 2337828 [Pa] #For demonstration, convert to psi units::set_units(tension, psi) #&gt; 339.0733 [psi] For example 2.1 units could have been tracked manually throughout, as if done by hand. The convenience of using the units package allows conversions that can be used to check hand calculations. Water expands as it is heated, which is part of what is driving sea-level rise globally. Approximately 90% of excess energy caused by global warming pollution is absorbed by oceans, with most of that occurring in the upper ocean: 0-700 m of depth (Fox-Kemper et al. 2021). Example 2.2 uses water mass and weight in a calculation. Example 2.2 Assume the ocean is made of fresh water (the change in density of sea water with temperature is close enough to fresh water for this illustration). Assume a 700 m thick upper layer of the ocean. Assuming this upper layer has an initial temperature of 15 \\(^\\circ\\)C and calculate the change in mean sea level due to a 2 \\(^\\circ\\)C rise in temperature of this upper layer. It may help to consider a single 1m x 1m column of water with h=700 m high under original conditions. Since mass is conserved, and mass = volume x density, this is simple: \\[LWh_1\\cdot\\rho_1=LWh_2\\cdot\\rho_2\\] or \\[h_2=h_1\\frac{\\rho_1}{\\rho_2}\\] rho1 = hydraulics::dens(T = 15, units = &#39;SI&#39;) rho2 = hydraulics::dens(T = 17, units = &#39;SI&#39;) h2 = 700 * (rho1/rho2) cat(sprintf(&quot;Change in sea level = %.3f m\\n&quot;, h2-700)) #&gt; Change in sea level = 0.227 m The bulk modulus, Ev, relates the change in specific volume to the change in pressure, and defined as in Equation (2.1). \\[\\begin{equation} E_v=-v\\frac{dp}{dv} \\tag{2.1} \\end{equation}\\] which can be discretized: \\[\\begin{equation} \\frac{v_2-v_1}{v_1}=-\\frac{p_2-p_1}{E_v} \\tag{2.2} \\end{equation}\\] where \\(v\\) is the specific volume (\\(v=\\frac{1}{\\rho}\\)) and \\(p\\) is pressure. Example 2.3 shows one application of this. Example 2.3 A barrel of water has an initial temperature of 15 \\(^\\circ\\)C at atmospheric pressure (p=0 Pa gage). Plot the pressure the barrel must exert to have no change in volume as the water warms to 20 \\(^\\circ\\)C. Here essentially the larger specific volume (at a higher temperature) is then compressed by \\({\\Delta}P\\) to return the volume to its original value. Thus, subscript 1 indicates the warmer condition, and subscript 2 the original at 15 \\(^\\circ\\)C. dp &lt;- function(tmp) { rho2 &lt;- hydraulics::dens(T = 15, units = &#39;SI&#39;) rho1 &lt;- hydraulics::dens(T = tmp, units = &#39;SI&#39;) Ev &lt;- hydraulics::Ev(T = tmp, units = &#39;SI&#39;) return((-((1/rho2) - (1/rho1))/(1/rho1))*Ev) } temps &lt;- seq(from=15, to=20, by=1) plot(temps,dp(temps), xlab=&quot;Temperature, C&quot;, ylab=&quot;Pressure increase, Pa&quot;, type=&quot;b&quot;) Figure 2.1: Approximate change in pressure as water temperature increases. These very high pressures required to compress water, even by a small fraction, validates the ordinary assumption that water can be considered incompressible in most applications. It should be noted that the Ev values produced by the hydraulics package only vary with temperature, and assume standard atmospheric pressure; in reality, Ev values increase with increasing pressure so the values plotted here serve only as a demonstration and underestimate the pressure increase. 2.2 Properties important for moving water When describing the behavior of moving water in civil engineering infrastructure like pipes and channels there are three primary water properties used used in calculations, all of which vary with water temperature: density (\\(\\rho\\)), dynamic viscosity(\\(\\mu\\)), and kinematic viscosity(\\(\\nu\\)), which are related by Equation (2.3). \\[\\begin{equation} \\nu=\\frac{\\mu}{\\rho} \\tag{2.3} \\end{equation}\\] Viscosity is caused by interaction of the fluid molecules as they are subjected to a shearing force. This is often illustrated by a conceptual sketch of two parallel plates, one fixed and one moving at a constant speed, with a fluid in between. Perhaps more intuitively, a smore can be used. If the velocity of the marshmallow filling varies linearly, it will be stationary (V=0) at the bottom and moving at the same velocity as the upper cracker at the top (V=U). The force needed to move the upper cracker can be calculated using Equation (2.4) \\[\\begin{equation} F=A{\\mu}\\frac{dV}{dy} \\tag{2.4} \\end{equation}\\] where y is the distance between the crackers and A is the cross-sectional area of a cracker. Equation (2.4) is often written in terms of shear stress \\({\\tau}\\) as in Equation (2.5) \\[\\begin{equation} \\frac{F}{A}={\\tau}={\\mu}\\frac{dV}{dy} \\tag{2.5} \\end{equation}\\] The following demonstrates a use of these relationships. Example 2.4 Determine force required to slide the top cracker at 1 cm/s with a thickness of marshmallow of 0.5 cm. The cross-sectional area of the crackers is 10 cm\\(^2\\). The viscosity (dynamic viscosity, as can be discerned by the units) of marshmallow is about 0.1 Pa\\(\\cdot\\)s. #Assign variables A &lt;- units::set_units(10, cm^2) U &lt;- units::set_units(1, cm/s) y &lt;- units::set_units(0.5, cm) mu &lt;- units::set_units(0.1, Pa*s) #Find shear stress tau &lt;- mu * U / y tau #&gt; 0.2 [Pa] #Since stress is F/A, multiply tau by A to find F, convert to Newtons and pounds units::set_units(tau*A, N) #&gt; 2e-04 [N] units::set_units(tau*A, lbf) #&gt; 4.496179e-05 [lbf] Water is less viscous than marshmallow, so viscosity for water has much lower values than in the example. Values for water can be obtained using the hydraulics R package for calculations, using the dens, dvisc, and kvisc. All of the water property functions can accept a list of input temperature values, enabling visualization of a property with varying water temperature, as shown in Figure 2.2. Ts &lt;- seq(0, 100, 10) nus &lt;- hydraulics::kvisc(T = Ts, units = &#39;SI&#39;) xlbl &lt;- expression(&quot;Temperature, &quot; (degree*C)) ylbl &lt;- expression(&quot;Kinematic viscosity,&quot; ~nu~ (m^{2}/s)) par(cex=0.8, mgp = c(2,0.7,0)) plot(Ts, nus, xlab = xlbl, ylab = ylbl, type=&quot;l&quot;) Figure 2.2: Variation of kinematic viscosity with temperature. 2.3 Atmosperic Properties Since water interacts with the atmosphere, through processes like evaporation and condensation, some basic properties of air are helpful. Selected characteristics of the standard atmosphere, as determined by the International Civil Aviation Organization (ICAO), are included in the hydraulics package. Three functions atmpres, atmdens, and atmtemp return different properties of the standard atmosphere, which vary with altitude. These are summarized in Table 2.3 for SI units and Table 2.4 for US (or Eng) units. Table 2.3: ICAO standard atmospheric properties in SI units Altitude Temp Pressure Density m C Pa kg m-3 0 15.00 101325.0 1.22500 1000 8.50 89876.3 1.11166 2000 2.00 79501.4 1.00655 3000 -4.49 70121.1 0.90925 4000 -10.98 61660.4 0.81935 5000 -17.47 54048.2 0.73643 6000 -23.96 47217.6 0.66011 7000 -30.45 41105.2 0.59002 8000 -36.93 35651.5 0.52579 9000 -43.42 30800.6 0.46706 10000 -49.90 26499.8 0.41351 11000 -56.38 22699.8 0.36480 12000 -62.85 19354.6 0.32062 13000 -69.33 16421.2 0.28067 14000 -75.80 13859.4 0.24465 15000 -82.27 11631.9 0.21229 Table 2.4: ICAO standard atmospheric properties in US units Altitude Temp Pressure Density ft F lbf ft-2 slug ft-3 0 59.00 2116.2 0.00237 5000 41.17 1760.9 0.00205 10000 23.36 1455.6 0.00175 15000 5.55 1194.8 0.00149 20000 -12.25 973.3 0.00127 25000 -30.05 786.3 0.00107 30000 -47.83 629.7 0.00089 35000 -65.61 499.3 0.00074 40000 -83.37 391.8 0.00061 45000 -101.13 303.9 0.00049 50000 -118.88 232.7 0.00040 As with water property functions, the data in the table can be extracted using individual commands for use in calculations. All atmospheric functions have input arguments of altitude (ft or m), unit system (SI or Eng), and whether or not units should be returned. hydraulics::atmpres(alt = 3000, units = &quot;SI&quot;, ret_units = TRUE) #&gt; 70121.14 [Pa] 2.3.1 Ideal gas law Because air is compressible, its density changes with pressure, and the temperature responds to compression. These are related through the ideal gas law, Equation (2.6) \\[\\begin{equation} \\begin{split} p={\\rho}RT\\\\ p{\\forall}=mRT \\end{split} \\tag{2.6} \\end{equation}\\] where \\(p\\) is absolute pressure, \\(\\forall\\) is the volume, \\(R\\) is the gas constant, \\(T\\) is absolute temperature, and \\(m\\) is the mass of the gas. When air changes its condition between two states, the ideal gas law can be restated as Equation (2.7) \\[\\begin{equation} \\frac{p_1{\\forall_1}}{T_1}=\\frac{p_2{\\forall_2}}{T_2} \\tag{2.7} \\end{equation}\\] Two convenient forms of Equation (2.7) apply for specific conditions. If mass is conserved, and conditions are isothermal, m, R, T are constant (isothermal conditions): \\[\\begin{equation} p_1{\\forall_1}=p_2{\\forall_2} \\tag{2.8} \\end{equation}\\] If mass is conserved and temperature changes adiabatically (meaning no heat is exchanged with surroundings) and reversibly, these are isentropic conditions, governed by Equations (2.9). \\[\\begin{equation} \\begin{split} p_1{\\forall_1}^k=p_2{\\forall_2}^k\\\\ \\frac{T_2}{T_1}=\\left(\\frac{p_2}{p_1}\\right)^{\\frac{k-1}{k}} \\end{split} \\tag{2.9} \\end{equation}\\] Properties of air used in these formulations of the ideal gas law are shown in Table 2.5. Table 2.5: Air properties at standard sea-level atmospheric pressure Gas Constant, R Sp. Heat, cp Sp. Heat, cv Sp. Heat Ratio, k 1715 ft lbf degR-1 slug-1 6000 ft lbf degR-1 slug-1 4285 ft lbf degR-1 slug-1 1.4 287 m N K-1 kg-1 1003 m N K-1 kg-1 717 m N K-1 kg-1 1.4 "],["hydrostatics---forces-exerted-by-water-bodies.html", "Chapter 3 Hydrostatics - forces exerted by water bodies 3.1 Pressure and force 3.2 Force on a plane area 3.3 Forces on curved surfaces", " Chapter 3 Hydrostatics - forces exerted by water bodies When water is motionless its weight exerts a pressure on surfaces with which it is in contact. The force is function of the density of the fluid and the depth. Figure 3.1: The Clywedog dam by Nigel Brown, CC BY-SA 2.0, via Wikimedia Commons 3.1 Pressure and force A consideration of all of the forces acting on a particle in a fluid in equilibrium produces Equation (3.1). \\[\\begin{equation} \\frac{dp}{dz}=-{\\gamma} \\tag{3.1} \\end{equation}\\] where \\(p\\) is pressure (\\(p=F/A\\)), \\(z\\) is height measured upward from a datum, and \\({\\gamma}\\) is the specific weight of the fluid (\\(\\gamma={\\rho}g\\)). Rewritten using depth (downward from the water surface), \\(h\\), produces Equation (3.2). \\[\\begin{equation} h=\\frac{p}{\\gamma} \\tag{3.2} \\end{equation}\\] Example 3.1 Find the force on the bottom of a 0.4 m diameter barrel filled with (20 \\(^\\circ\\)C) water for barrel heights from 0.5 m to 1.5 m. area &lt;- pi/4*0.4^2 gamma &lt;- hydraulics::specwt(T = 20, units = &#39;SI&#39;) heights &lt;- seq(from=0.5, to=1.5, by=0.05) pressures &lt;- gamma * heights forces &lt;- pressures * area plot(forces,heights, xlab=&quot;Total force on barrel bottom, N&quot;, ylab=&quot;Depth of water, m&quot;, type=&quot;l&quot;) grid() Figure 3.2: Force on barrel bottom. The linear relationship is what was expected. 3.2 Force on a plane area For a submerged flat surface, the magnitude of the hydrostatic force can be found using Equation (3.3). \\[\\begin{equation} F={\\gamma}y_c\\sin{\\theta}A={\\gamma}h_cA \\tag{3.3} \\end{equation}\\] The force is located as defined by Equation (3.4). \\[\\begin{equation} y_p=y_c+\\frac{I_c}{y_cA} \\tag{3.4} \\end{equation}\\] The variables correspond to the definitions in Figure 3.3. Figure 3.3: Forces on a plane area, by Ertunc, CC BY-SA 4.0, via Wikimedia Commons The location of the centroid and the moment of inertia, \\(I_c\\) for some common shapes are shown in Figure 3.4 (Moore, J. et al. 2022). The variables correspond to the definitions in Figure 3.4. Figure 3.4: Centroids and moments of inertia for common shapes Example 3.2 A 6 m long hinged gate with a width of 1 m (into the paper) is at an angle of 60o and is held in place by a horizontal cable. Plot the tension in the cable, \\(T\\), as the water depth, \\(h\\), varies from 0.1 to 4 m in depth. Ignore the weight of the gate. Figure 3.5: Reservoir with hinged gate (Olivier Cleyne, CC0 license, via Wikimedia Commons) The surface area of the gate that is wetted is \\(A=L{\\cdot}w=\\frac{h{\\cdot}w}{\\sin(60)}\\). The wetted area is rectangular, so \\(h_c=\\frac{h}{2}\\). The magnitude of the force uses (3.3): \\[F={\\gamma}h_cA={\\gamma}\\frac{h}{2}\\frac{h{\\cdot}w}{\\sin(60)}\\] The distance along the plane from the water surface to the centroid of the wetted area is \\(y_c=\\frac{1}{2}\\frac{h}{\\sin(60)}\\). The moment of inertia for the rectangular wetted area is \\(I_c=\\frac{1}{12}w\\left(\\frac{h}{\\sin(60)}\\right)^3\\). Taking moments about the hinge at the bottom of the gate yields \\(T{\\cdot}6\\sin(60)-F{\\cdot}\\left(\\frac{h}{\\sin(60)}-y_p\\right)=0\\) or \\(T=\\frac{F}{6\\cdot\\sin(60)}\\left(\\frac{h}{\\sin(60)}-y_p\\right)\\) These equations can be used in R to create the desired plot. gate_length &lt;- 6.0 w &lt;- 1.0 theta &lt;- 60*pi/180 #convert angle to radians h &lt;- seq(from=0.1, to=4.1, by=0.25) gamma &lt;- hydraulics::specwt(T = 20, units = &#39;SI&#39;) area &lt;- h*w/sin(theta) hc &lt;- h/2 Force &lt;- gamma*hc*area yc &lt;- (1/2)*h/(sin(theta)) Ic &lt;- (1/12)*w*(h/sin(theta))^3 yp &lt;- yc + (Ic/(yc*area)) Tension &lt;- Force/(gate_length*sin(theta)) * (h/sin(theta) - yp) plot(Tension,h, xlab=&quot;Cable tension, N&quot;, ylab=&quot;Depth of water, m&quot;, type=&quot;l&quot;) grid() 3.3 Forces on curved surfaces For forces on curved surfaces, the procedure is often to calculate the vertical, \\(F_V\\), and horizontal, \\(F_H\\), hydrostatic forces separately. \\(F_H\\) is simpler, since it is the horizontal force on a (plane) vertical projection of the submerged surface, so the methods of Section 3.2 apply. The vertical component, \\(F_V\\), for a submerged surface with water above has a magnitude of the weight of the water above it, which acts through the center of volume. For a curved surface with water below it the magnitude of \\(F_V\\) is the volume of the ‘mising’ water that would be above it, and the force acts upward. Figure 3.6: Forces on curved surfaces, by Ertunc, CC BY-SA 4.0, via Wikimedia Commons A classic example of a curved surface in civil engineering hydraulics is a radial (or Tainter) gate, as in Figure 3.7. Figure 3.7: Radial gates on the Rogue River, OR. To simplify the geometry, a problem is presented in Example 3.3 where the gate meets the base at a horizontal angle. Example 3.3 A radial gate with radius R=6 m and a width of 1 m (into the paper) controls water. Find the horizontal and vertical hydrostatic forces for depths, \\(h\\), from 0 to 6 m. The horizontal hydrostatic force is that acting on a rectangle of height \\(h\\) and width \\(w\\): \\[F_H=\\frac{1}{2}{\\gamma}h^2w\\] which acts at a height of \\(y_c=\\frac{h}{3}\\) from the bottom of the gate. The vertical component has a magnitude equal to the weight of the ‘missing’ water indicated on the sketch. The calculation of its volume requires the area of a circular sector minus the area of a triangle above it. The angle, \\(\\theta\\) is found using geometry to be \\({\\theta}=cos^{-1}\\left(\\frac{R-h}{R}\\right)\\). Using the equations for areas of these two components as in Figure 3.4, the following is obtained: \\[F_V={\\gamma}w\\left(\\frac{R^2\\theta}{2}-\\frac{R-h}{2}R\\sin{\\theta}\\right)\\] The line of action of \\(F_V\\) can be determined by combining the components for centroids of the composite shapes, again following Figure 3.4. Because the line of action of the resultant force on a curcular gate must pass through the center of the circle (since hydrostatic forces always act normal to the gate), the moments about the hinge of \\(F_H\\) and \\(F_V\\) must equal zero. \\[\\sum{M}_{hinge}=0=F_H\\left(R-h/3\\right)-F_V{\\cdot}x_c\\] This produces the equation: \\[x_c=\\frac{F_H\\left(R-h/3\\right)}{F_V}\\] These equations can be solved in many ways, such as the following. R &lt;- units::set_units(6.0, m) w &lt;- units::set_units(1.0, m) gamma &lt;- hydraulics::specwt(T = 20, units = &#39;SI&#39;, ret_units = TRUE) h &lt;- units::set_units(seq(from=0, to=6, by=1), m) #angle in radians throughout, units not needed theta &lt;- units::drop_units(acos((R-h)/R)) area &lt;- h*w/sin(theta) Fh &lt;- (1/2)*gamma*h^2*w yc &lt;- h/3 Fv &lt;- gamma*w*((R^2*theta)/2 - ((R-h)/2) * R*sin(theta)) xc &lt;- Fh*(R-h/3)/Fv Ftotal &lt;- sqrt(Fh^2+Fv^2) tibble::tibble(h=h, Fh=Fh, yc=yc, Fv=Fv, xc=xc, Ftotal=Ftotal) #&gt; # A tibble: 7 × 6 #&gt; h Fh yc Fv xc Ftotal #&gt; [m] [N] [m] [N] [m] [N] #&gt; 1 0 0 0 0 NaN 0 #&gt; 2 1 4896. 0.333 22041. 1.26 22578. #&gt; 3 2 19585. 0.667 60665. 1.72 63748. #&gt; 4 3 44067. 1 108261. 2.04 116886. #&gt; 5 4 78341. 1.33 161583. 2.26 179573. #&gt; 6 5 122408. 1.67 218398. 2.43 250363. #&gt; 7 6 176268. 2 276881. 2.55 328228. "],["water-flowing-in-pipes-energy-losses.html", "Chapter 4 Water flowing in pipes: energy losses 4.1 Important dimensionless quantity 4.2 Friction Loss in Circular Pipes 4.3 Solving Pipe friction problems 4.4 Solving for head loss (Type 1 problems) 4.5 Solving for Flow or Velocity (Type 2 problems) 4.6 Solving for pipe diameter, D (Type 3 problems) 4.7 Parallel pipes: solving a system of equations 4.8 Simple pipe networks: the Hardy-Cross method", " Chapter 4 Water flowing in pipes: energy losses Flow in civil engineering infrastructure is usually either in pipes, where it is not exposed to the atmosphere and flows under pressure, or open channels (canals, rivers, etc.). this chapter is concerned only with water flow in pipes. Once water begins to move engineering problems often need to relate the flow rate to the energy dissipated. To accomplish this, the flow needs to be classified using dimensionless constants since energy dissipation varies with the flow conditions. 4.1 Important dimensionless quantity As water begins to move, the characteristics are described by two quantities in engineering hydraulics: the Reynolds number, Re and the Froude number Fr. The latter is more important for open channel flow and will be discussed in that chapter. Reynolds number describes the turbulence of the flow, defined by the ratio of kinematic forces, expressed by velocity V and a characteristic length such as pipe diameter, D, to viscous forces as expressed by the kinematic viscosity \\(\\nu\\), as in Equation (4.1) \\[\\begin{equation} Re=\\frac{VD}{\\nu} \\tag{4.1} \\end{equation}\\] For open channels the characteristic length is the hydraulic depth, the area of flow divided by the top width. For adequately turbulent conditions to exists, Reynolds numbers should exceed 4000 for full pipes, and 2000 for open channels. 4.2 Friction Loss in Circular Pipes The energy at any point along a pipe containing flowing water is often described by the energy per unit weight, or energy head, E, as in Equation (4.2) \\[\\begin{equation} E = z+\\frac{P}{\\gamma}+\\alpha\\frac{V^2}{2g} \\tag{4.2} \\end{equation}\\] where P is the pressure, \\(\\gamma=\\rho g\\) is the specific weight of water, z is the elevation of the point, V is the average velocity, and each term has units of length. \\(\\alpha\\) is a kinetic energy adjustment factor to account for non-uniform velocity distribution across the cross-section. \\(\\alpha\\) is typically assumed to be 1.0 for turbulent flow in circular pipes because the value is close to 1.0 and \\(\\frac{V^2}{2g}\\) (the velocity head) tends to be small in relation to other terms in the equation. Some applications where velocity varies widely across a cross-section, such as a river channel with flow in a main channel and a flood plain, will need to account for values of \\(\\alpha\\) other than one. As water flows through a pipe energy is lost due to friction with the pipe walls and local disturbances (minor losses). The energy loss between two sections is expressed as \\({E_1} - {h_l} = {E_2}\\). When pipes are long, with \\(\\frac{L}{D}&gt;1000\\), friction losses dominate the energy loss on the system, and the head loss, \\(h_l\\), is calculated as the head loss due to friction, \\(h_f\\). This energy head loss due to friction with the walls of the pipe is described by the Darcy-Weisbach equation, which estimates the energy loss per unit weight, or head loss \\({h_f}\\), which has units of length. For circular pipes it is expressed by Equation (4.3) \\[\\begin{equation} h_f = \\frac{fL}{D}\\frac{V^2}{2g} = \\frac{8fL}{\\pi^{2}gD^{5}}Q^{2} \\tag{4.3} \\end{equation}\\] In equation (4.3) f is the friction factor, typically calculated with the Colebrook equation (Equation (4.4)). \\[\\begin{equation} \\frac{1}{\\sqrt{f}} = -2\\log\\left(\\frac{\\frac{k_s}{D}}{3.7} + \\frac{2.51}{Re\\sqrt{f}}\\right) \\tag{4.4} \\end{equation}\\] In Equation (4.4) \\(k_s\\) is the absolute roughness of the pipe wall. There are close approximations to the Colebrook equation that have an explicit form to facilitate hand-calculations, but when using R or other computational tools there is no need to use approximations. 4.3 Solving Pipe friction problems As water flows through a pipe energy is lost due to friction with the pipe walls and local disturbances (minor losses). For this example assume minor losses are negligible. The energy head loss due to friction with the walls of the pipe is described by the Darcy-Weisbach equation (Equation ((4.3))), which estimates the energy loss per unit weight, or head loss hf, which has units of length. The Colebrook equation (Equation (4.4)) is commonly plotted as a Moody diagram to illustrate the relationships between the variables, in Figure 4.1. hydraulics::moody() Figure 4.1: Moody Diagram Because of the form of the equations, they can sometimes be a challenge to solve, especially by hand. It can help to classify the types of problems based on what variable is unknown. These are summarized in Table 4.1. Table 4.1: Types of Energy Loss Problems in Pipe Flow Type Known Unknown 1 Q (or V), D, ks, L hL 2 hL, D, ks, L Q (or V) 3 hL, Q (or V), ks, L D When solving by hand the types in Table 4.1 become progressively more difficult, but when using solvers the difference in complexity is subtle. 4.4 Solving for head loss (Type 1 problems) The simplest pipe flow problem to solve is when the unknown is head loss, hf (equivalent to hL in the absence of minor losses), since all variables on the right side of the Darcy-Weisbach equation are known, except f. 4.4.1 Solving for head loss by manual iteration While all unknowns are on the right side of Equation (4.3), iteration is still required because the Colebrook equation, Equation (4.4), cannot be solved explicitly for f. An illustration of solving this type of problem is shown in Example 4.1. Example 4.1 Find the head loss (due to friction) of 20\\(^\\circ\\)C water in a pipe with the following characteristics: Q=0.416 m\\(^3\\)/s, L=100m, D=0.5m, ks=0.046mm. Since the water temperature is known, first find the kinematic viscocity of water, \\({\\nu}\\), since it is needed for the Reynolds number. This can be obtained from a table in a reference or using software. Here we will use the hydraulics R package. nu &lt;- hydraulics::kvisc(T=20, units=&quot;SI&quot;) cat(sprintf(&quot;Kinematic viscosity = %.3e m2/s\\n&quot;, nu)) #&gt; Kinematic viscosity = 1.023e-06 m2/s We will need the Reynolds Number to use the Colebrook equation, and that can be calculated since Q is known. This can be accomplished with a calculator, or using other software (R is used here): Q &lt;- 0.416 D &lt;- 0.5 A &lt;- (3.14/4)*D^2 V &lt;- Q/A Re &lt;- V*D/nu cat(sprintf(&quot;Velocity = %.3f m/s, Re = %.3e\\n&quot;, V, Re)) #&gt; Velocity = 2.120 m/s, Re = 1.036e+06 Now the only unknown in the Colebrook equation is f, but unfortunately f appears on both sides of the equation. To begin the iterative process, a first guess at f is needed. A reasonable value to use is the minimum f value, fmin, given the known \\(\\frac{k_s}{D}=\\frac{0.046}{500}=0.000092=9.2\\cdot 10^{-5}\\). Reading horizontally from the right vertical axis to the left on the Moody diagram provides a value for \\(f_{min}\\approx 0.012\\). Numerically, it can be seen that f is independent of Re for large values of Re. When Re is large the second term of the Colebrook equation becomes small and the equation approaches Equation (4.5). \\[\\begin{equation} \\frac{1}{\\sqrt{f}} = -2\\log\\left(\\frac{\\frac{k_s}{D}}{3.7}\\right) \\tag{4.5} \\end{equation}\\] This independence of f with varying Re values is visible in the Moody Diagram, Figure 4.1, toward the right, where the lines become horizontal. Using Equation (4.5) the same value of fmin=0.012 is obtained, since the colebrook equation defines the Moody diagram. Iteration 1: Using f=0.012 the right side of the Colebrook equation is 8.656. the next estimate for f is then obtained by \\(\\frac{1}{\\sqrt{f}}=8.656\\) so f=0.0133. Iteration 2: Using the new value of f=0.0133 in the right side of the Colebrook equation produces 8.677. A new value for f is obtained by \\(\\frac{1}{\\sqrt{f}}=8.677\\) so f=0.0133. The solution has converged! Using the new value of f, the value for hf is calculated: \\[h_f = \\frac{8fL}{\\pi^{2}gD^{5}}Q^{2}=\\frac{8(0.0133)(100)}{\\pi^{2}(9.81)(0.5)^{5}}(0.416)^{2}=0.061 m\\] 4.4.2 Solving for headloss using an empirical approximation A shortcut that can be used to avoid iterating to find the friction factor is to use an approximation to the Colebrook equation that can be solved explicitly. One example is the Haaland equation (4.6) (Haaland 1983). \\[\\begin{equation} \\frac{1}{\\sqrt{f}} = -1.8\\log\\left(\\left(\\frac{\\frac{k_s}{D}}{3.7}\\right)^{1.11}+\\frac{6.9}{Re}\\right) \\tag{4.6} \\end{equation}\\] For ordinary pipe flow conditions in water pipes, Equation (4.6) is accurate to within 1.5% of the Colebrook equation. There are many other empirical equations, one common one being that of Swamee and Jain (Swamee and Jain 1976), shown in Equation (4.7). \\[\\begin{equation} \\frac{1}{\\sqrt{f}} = -2\\log\\left(\\frac{\\frac{k_s}{D}}{3.7}+\\frac{5.74}{Re^{0.9}}\\right) \\tag{4.7} \\end{equation}\\] These approximations are useful for solving problems by hand or in spreadsheets, and their accuracy is generally within the uncertainty of other input variables like the absolute roughness. 4.4.3 Solving for head loss using an equation solver Rather than use an empirical approximation (as in Section 4.4.2) to the Colebrook equation, it is straightforward to apply an equation solver to use the Colebrook equation directly. This is demonstrated in Example 4.2. Example 4.2 Find the friction factor for the same conditions as Example 4.1: D=0.5m, ks=0.046mm, and Re=1.036e+06. First, rearrange the Colebrook equation so all terms are on one side of the equation, as in Equation (4.8). \\[\\begin{equation} -2\\log\\left(\\frac{\\frac{k_s}{D}}{3.7} + \\frac{2.51}{Re\\sqrt{f}}\\right) - \\frac{1}{\\sqrt{f}}=0 \\tag{4.8} \\end{equation}\\] Create a function using whatever equation solving platform you prefer. Here the R software is used: colebrk &lt;- function(f,ks,D,Re) -2.0*log10((ks/D)/3.7 + 2.51/(Re*(f^0.5)))-1/(f^0.5) Find the root of the function (where it equals zero), specifying a reasonable range for f values using the interval argument: f &lt;- uniroot(colebrk, interval = c(0.008,0.1), ks=0.000046, D=0.5, Re=1.036e+06)$root cat(sprintf(&quot;f = %.4f\\n&quot;, f)) #&gt; f = 0.0133 The same value for hf as above results. 4.4.4 Solving for head loss using an R package Equation solvers for implicit equations, like in Section 4.4.3, are built into the R package hydraulics. that can be applied directly, without writing a separate function. Example 4.3 Using the hydraulics R package, find the friction factor and head loss for the same conditions as Example 4.2: Q=0.416 m3/s, L=100 m, D=0.5m, ks=0.046mm, and nu = 1.023053e-06 m2/s. ans &lt;- hydraulics::darcyweisbach(Q = 0.416,D = 0.5, L = 100, ks = 0.000046, nu = 1.023053e-06, units = c(&quot;SI&quot;)) #&gt; hf missing: solving a Type 1 problem cat(sprintf(&quot;Reynolds no: %.0f\\nFriction Fact: %.4f\\nHead Loss: %.2f ft\\n&quot;, ans$Re, ans$f, ans$hf)) #&gt; Reynolds no: 1035465 #&gt; Friction Fact: 0.0133 #&gt; Head Loss: 0.61 ft If only the f value is needed, the colebrook function can be used. f &lt;- hydraulics::colebrook(ks=0.000046, V= 2.120, D=0.5, nu=1.023e-06) cat(sprintf(&quot;f = %.4f\\n&quot;, f)) #&gt; f = 0.0133 Notice that the colebrook function needs input in dimensionally consistent units. Because it is dimensionally homogeneous and the input dimensions are consistent, the unit system does not need to be defined like with many other functions in the hydraulics package. 4.5 Solving for Flow or Velocity (Type 2 problems) When flow (Q) or velocity (V) is unknown, the Reynolds number cannot be determined, complicating the solution of the Colebrook equation. As with Secion 4.4 there are several strategies to solving these, ranging from iterative manual calculations to using software packages. For Type 2 problems, since D is known, once either V or Q is known, the other is known, since \\(Q=V{\\cdot}A=V\\frac{\\pi}{4}D^2\\). 4.5.1 Solving for Q (or V) using manual iteration Solving a Type 2 problem can be done with manual iterations, as demonstrated in Example 4.4. Example 4.4 find the flow rate, Q of 20oC water in a pipe with the following characteristics: hf=0.6m, L=100m, D=0.5m, ks=0.046mm. First rearrange the Darcy-Weisbach equation to express V as a function of f, substituting all of the known quantities: \\[V = \\sqrt{\\frac{h_f}{L}\\frac{2gD}{f}}=\\frac{0.243}{\\sqrt{f}}\\] That provides one equation relating V and f. The second equation relating V and f is one of the friction factor equations, such as the Colebrook equation or its graphic representation in the Moody diagram. An initial guess at a value for f is obtained using fmin=0.012 as was done in Example 4.1. Iteration 1: \\(V=\\frac{0.243}{\\sqrt{0.012}}=2.218\\); \\(Re=\\frac{2.218\\cdot 0.5}{1.023e-06}=1.084 \\cdot 10^6\\). A new f value is obtained from the Moody diagram or an equation using the new Re value: \\(f \\approx 0.0131\\) Iteration 2: \\(V=\\frac{0.243}{\\sqrt{0.0131}}=2.123\\); \\(Re=\\frac{2.123\\cdot 0.5}{1.023e-06}=1.038 \\cdot 10^6\\). A new f estimate: \\(f \\approx 0.0132\\) The function converges very quickly if a reasonable first guess is made. Using V=2.12 m/s, \\(Q = AV = \\left(\\frac{\\pi}{4}\\right)D^2V=0.416 m^3/s\\) 4.5.2 Solving for Q Using an Explicit Equation Solving Type 2 problems using iteration is not necessary, since an explicit equation based on the Colebrook equation can be derived. Solving the Darcy Weisbach equation for \\(\\frac{1}{\\sqrt{f}}\\) and substituting that into the Colebrook equation produces Equation (4.9). \\[\\begin{equation} Q=-2.221D^2\\sqrt{\\frac{gDh_f}{L}} \\log\\left(\\frac{\\frac{k_s}{D}}{3.7} + \\frac{1.784\\nu}{D}\\sqrt{\\frac{L}{gDh_f}}\\right) \\tag{4.9} \\end{equation}\\] This can be solved explicitly for Q=0.413 m3/s. 4.5.3 Solving for Q Using an R package Using software to solve the problem allows the use of the Colebrook equation in a straightforward format. The hydraulics package in R is applied to the same problem as above. ans &lt;- hydraulics::darcyweisbach(D=0.5, hf=0.6, L=100, ks=0.000046, nu=1.023e-06, units = c(&#39;SI&#39;)) knitr::kable(format(as.data.frame(ans), digits = 3), format = &quot;pipe&quot;) Q V L D hf f ks Re 0.406 2.07 100 0.5 0.6 0.0133 4.6e-05 1010392 The answer differs from the manual iteration by just over 2%, showing remarkable consistency. 4.6 Solving for pipe diameter, D (Type 3 problems) When D is unknown, neither Re nor relative roughness \\(\\frac{ks}{D}\\) are known. Referring to the Moody diagram, Figure 4.1, the difficulty in estimating a value for f (on the left axis) is evident since the positions on either the right axis (\\(\\frac{ks}{D}\\)) or x-axis (Re) are known. 4.6.1 Solving for D using manual iterations Solving for D using manual iterations is done by first rearranging Equation (4.9) to allow it to be solved for zero, as in Equation (4.10). \\[\\begin{equation} -2.221D^2\\sqrt{\\frac{gDh_f}{L}} \\log\\left(\\frac{\\frac{k_s}{D}}{3.7} + \\frac{1.784\\nu}{D}\\sqrt{\\frac{L}{gDh_f}}\\right)-Q=0 \\tag{4.10} \\end{equation}\\] Using this with manual iterations is demonstrated in Example 4.5. Example 4.5 For a similar problem to 4.4 use Q=0.416m3/s and solve for the required pipe diameter, D. This can be solved manually by guessing values and repeating the calculation in a spreadsheet or with a tool like R. Iteration 1: Guess an arbitrary value of D=0.3m. Solve the left side of Equation (4.10) to obtain a value of -0.31 Iteration 2: Guess another value for D=1.0m. The left side of Equation (4.10) produces a value for the function of 2.11 The root, when the function equals zero, lies between the two values, so the correct D is between 0.3 and 1.0. Repeated values can home in on a solution. Plotting the results from many trials can help guide toward the solution. The root is seen to lie very close to D=0.5 m. Repeated trials can home in on the result. 4.6.2 Solving for D using an equation solver An equation solver automatically accomplishes the manual steps of the prior demonstration. The equation from 1.6 can be written as a function that can then be solved for the root, again using R software for the demonstration: q_fcn &lt;- function(D, Q, hf, L, ks, nu, g) { -2.221 * D^2 * sqrt(( g * D * hf)/L) * log10((ks/D)/3.7 + (1.784 * nu/D) * sqrt(L/(g * D * hf))) - Q } The uniroot function can solve the equation in R (or use a comparable approach in other software) for a reasonable range of D values ans &lt;- uniroot(q_fcn, interval=c(0.01,4.0),Q=0.416, hf=0.6, L=100, ks=0.000046, nu=1.023053e-06, g=9.81)$root cat(sprintf(&quot;D = %.3f m\\n&quot;, ans)) #&gt; D = 0.501 m 4.7 Parallel pipes: solving a system of equations In the examples above the challenge was often to solve a single implicit equation. The manual iteration approach can work to solve two equations, but as the number of equations increases, especially when using implicit equations, using an equation solver is needed. For the case of a simple pipe loop manual iterations are impractical. for this reason often fixed values of f are assumed, or an empirical energy loss equation is used. However, a single loop, identical to a parallel pipe problem, can be used to demonstrate how systems of equations can be solved simultaneously for systems of pipes. Example 4.6 demonstrates the process of assembling the equations for a solver for a parallel pipe problem. Example 4.6 Two pipes carry a flow of Q=0.5 m3/s, as depicted in Figure 4.2 Figure 4.2: Parallel Pipe Example The fundamental equations needed are the Darcy-Weisbach equation, the Colebrook equation, and continuity (conservation of mass). For the illustrated system, this means: The flows through each pipe must add to the total flow The head loss through Pipe 1 must equal that of Pipe 2 This could be set up as a system of anywhere from 2 to 10 equations to solve simultaneously. In this example four equations are used: \\[\\begin{equation} Q_1+Q_2-Q_{total}=V_1\\frac{\\pi}{4}D_1^2+V_2\\frac{\\pi}{4}D_2^2-0.5m^3/s=0 \\tag{4.11} \\end{equation}\\] and \\[\\begin{equation} Qh_{f1}-h_{f2} = \\frac{f_1L_1}{D_1}\\frac{V_1^2}{2g} -\\frac{f_2L_2}{D_2}\\frac{V_2^2}{2g}=0 \\tag{4.12} \\end{equation}\\] The other two equations are the Colebrook equation (4.8) for solving for the friction factor for each pipe. These four equations can be solved simultaneously using an equation solver, such as the fsolve function in the R package pracma. #assign known inputs - SI units Qsum &lt;- 0.5 D1 &lt;- 0.2 D2 &lt;- 0.3 L1 &lt;- 400 L2 &lt;- 600 ks &lt;- 0.000025 g &lt;- 9.81 nu &lt;- hydraulics::kvisc(T=100, units=&#39;SI&#39;) #Set up the function that sets up 4 unknowns (x) and 4 equations (y) F_trial &lt;- function(x) { V1 &lt;- x[1] V2 &lt;- x[2] f1 &lt;- x[3] f2 &lt;- x[4] Re1 &lt;- V1*D1/nu Re2 &lt;- V2*D2/nu y &lt;- numeric(length(x)) #Continuity - flows in each branch must add to total y[1] &lt;- V1*pi/4*D1^2 + V2*pi/4*D2^2 - Qsum #Darcy-Weisbach equation for head loss - must be equal in each branch y[2] &lt;- f1*L1*V1^2/(D1*2*g) - f2*L2*V2^2/(D2*2*g) #Colebrook equation for friction factors y[3] &lt;- -2.0*log10((ks/D1)/3.7 + 2.51/(Re1*(f1^0.5)))-1/(f1^0.5) y[4] &lt;- -2.0*log10((ks/D2)/3.7 + 2.51/(Re2*(f2^0.5)))-1/(f2^0.5) return(y) } #provide initial guesses for unknowns and run the fsolve command xstart &lt;- c(2.0, 2.0, 0.01, 0.01) z &lt;- pracma::fsolve(F_trial, xstart) #prepare some results to print Q1 &lt;- z$x[1]*pi/4*D1^2 Q2 &lt;- z$x[2]*pi/4*D2^2 hf1 &lt;- z$x[3]*L1*z$x[1]^2/(D1*2*g) hf2 &lt;- z$x[4]*L2*z$x[2]^2/(D2*2*g) cat(sprintf(&quot;Q1=%.2f, Q2=%.2f, V1=%.1f, V2=%.1f, hf1=%.1f, hf2=%.1f, f1=%.3f, f2=%.3f\\n&quot;, Q1,Q2,z$x[1],z$x[2],hf1,hf2,z$x[3],z$x[4])) #&gt; Q1=0.15, Q2=0.35, V1=4.8, V2=5.0, hf1=30.0, hf2=30.0, f1=0.013, f2=0.012 If the fsolve command fails, a simple solution is sometimes to revise your initial guesses and try again. There are other solvers in R and every other scripting language that can be similarly implemented. If the simplification were applied for fixed f values, then Equations (4.11) and (4.12) can be solved simultaneously for V1 and V2. 4.8 Simple pipe networks: the Hardy-Cross method For water pipe networks containing multiple loops, manually setting up systems of equations is impractical. In addition, hand calculations always assume fixed f values or use an empirical friction loss equation to simplify calculations. A typical method to solve for the flow in each pipe segment in a small network uses the Hardy-Cross method. This consists of setting up an initial guess of flow (magnitude and direction) for each pipe segment, ensuring conservation of mass is preserved at each node (or vertex) in the network. Then calculations are performed for each loop, ensuring energy is conserved. When using the Darcy-Weisbach equation, Equation (4.3), for friction loss, the head loss in each pipe segment is usually expressed in a condensed form as \\({h_f = KQ^{2}}\\) where K is defined as in Equation (4.13). \\[\\begin{equation} K = \\frac{8fL}{\\pi^{2}gD^{5}} \\tag{4.13} \\end{equation}\\] When doing calculations by hand fixed f values are assumed, but when using a computational tool like R any of the methods for estimating f and hf may be applied. The Hardy-Cross method begins by assuming flows in each segment of a loop. These initial flows are then adjusted in a series of iterations. The flow adjustment in each loop is calculated at each iteration in Equation Equation (4.14). \\[\\begin{equation} \\Delta{Q_i} = -\\frac{\\sum_{j=1}^{p_i} K_{ij}Q_j|Q_j|}{\\sum_{j=1}^{p_i} 2K_{ij}Q_j^2} \\tag{4.14} \\end{equation}\\] For calculations for small systems with two or three loops can be done manually with fixed f and K values. Using the hydraulics R package to solve a small pipe network is demonstrated in Example 4.7. Example 4.7 Find the flows in each pipe in teh system shown in Figure 4.3. Input consists of pipe characteristics, pipe order and initial flows for each loop, as shown non the diagram. Figure 4.3: A sample pipe network with pipe numbers indicated in black Input for this system, assuming fixed f values, would look like the following. (If fixed K values are provided, f, L and D are not needed). These f values were estimated using \\(ks=0.00025 m\\) in the form of the Colebrook equation for fully rough flows, Equation (4.5). dfpipes &lt;- data.frame( ID = c(1,2,3,4,5,6,7,8,9,10), #pipe ID D = c(0.3,0.2,0.2,0.2,0.2,0.15,0.25,0.15,0.15,0.25), #diameter in m L = c(250,100,125,125,100,100,125,100,100,125), #length in m f = c(.01879,.02075,.02075,.02075,.02075,.02233,.01964,.02233,.02233,.01964) ) loops &lt;- list(c(1,2,3,4,5),c(4,6,7,8),c(3,9,10,6)) Qs &lt;- list(c(.040,.040,.02,-.02,-.04),c(.02,0,0,-.02),c(-.02,.02,0,0)) Running the hardycross function and looking at the output after three iterations (defined by n_iter): ans &lt;- hydraulics::hardycross(dfpipes = dfpipes, loops = loops, Qs = Qs, n_iter = 3, units = &quot;SI&quot;) knitr::kable(ans$dfloops, digits = 4, format = &quot;pipe&quot;, padding=0) loop pipe flow 1 1 0.0383 1 2 0.0383 1 3 0.0232 1 4 -0.0258 1 5 -0.0417 2 4 0.0258 2 6 0.0090 2 7 0.0041 2 8 -0.0159 3 3 -0.0232 3 9 0.0151 3 10 -0.0049 3 6 -0.0090 The output pipe data frame has added columns, including the flow (where direction is that for the first loop containing the segment). knitr::kable(ans$dfpipes, digits = 4, format = &quot;pipe&quot;, padding=0) ID D L f Q K 1 0.30 250 0.0188 0.0383 159.7828 2 0.20 100 0.0208 0.0383 535.9666 3 0.20 125 0.0208 0.0232 669.9582 4 0.20 125 0.0208 -0.0258 669.9582 5 0.20 100 0.0208 -0.0417 535.9666 6 0.15 100 0.0223 0.0090 2430.5356 7 0.25 125 0.0196 0.0041 207.7883 8 0.15 100 0.0223 -0.0159 2430.5356 9 0.15 100 0.0223 0.0151 2430.5356 10 0.25 125 0.0196 -0.0049 207.7883 While the Hardy-Cross method is often used with fixed f (or K) values when it is used in exercises performed by hand, the use of the Colebrook equation allows friction losses to vary with Reynolds number. To use this approach the input data must include absolute roughness. Example values are included here: dfpipes &lt;- data.frame( ID = c(1,2,3,4,5,6,7,8,9,10), #pipe ID D = c(0.3,0.2,0.2,0.2,0.2,0.15,0.25,0.15,0.15,0.25), #diameter in m L = c(250,100,125,125,100,100,125,100,100,125), #length in m ks = rep(0.00025,10) #absolute roughness, m ) loops &lt;- list(c(1,2,3,4,5),c(4,6,7,8),c(3,9,10,6)) Qs &lt;- list(c(.040,.040,.02,-.02,-.04),c(.02,0,0,-.02),c(-.02,.02,0,0)) The effect of allowing the calculation of f to be (correctly) dependent on velocity (via the Reynolds number) can be seen, though the effect on final flow values is small. ans &lt;- hydraulics::hardycross(dfpipes = dfpipes, loops = loops, Qs = Qs, n_iter = 3, units = &quot;SI&quot;) knitr::kable(ans$dfpipes, digits = 4, format = &quot;pipe&quot;, padding=0) ID D L ks Q f K 1 0.30 250 3e-04 0.0382 0.0207 176.1877 2 0.20 100 3e-04 0.0382 0.0218 562.9732 3 0.20 125 3e-04 0.0230 0.0224 723.1119 4 0.20 125 3e-04 -0.0258 0.0222 718.1439 5 0.20 100 3e-04 -0.0418 0.0217 560.8321 6 0.15 100 3e-04 0.0088 0.0248 2700.4710 7 0.25 125 3e-04 0.0040 0.0280 296.3990 8 0.15 100 3e-04 -0.0160 0.0238 2590.2795 9 0.15 100 3e-04 0.0152 0.0239 2598.5553 10 0.25 125 3e-04 -0.0048 0.0270 285.4983 "],["flow-in-open-channels.html", "Chapter 5 Flow in open channels 5.1 An important dimensionless quantity 5.2 Equations for open channel flow 5.3 Trapezoidal channels 5.4 Circular Channels (flowing partially full) 5.5 Critical flow 5.6 Gradually varied steady flow 5.7 Rapidly varied flow (the hydraulic jump)", " Chapter 5 Flow in open channels Where flowing water water is exposed to the atmosphere, and thus not under pressure, its condition is called open channel flow. Typical design challenges can be: Determining how deep water will flow in a channel Finding the bottom slope required to carry a defined flow in a channel Comparing different cross-sectional shapes and dimensions to carry flow In pipe flow the cross-sectional area does not change with flow rate, which simplifies some aspects of calculations. By contrast, in open channel flow conditions including flow depth, area, and roughness can all vary with flow rate, which tends to make the equations more cumbersome. In civil engineering applications, roughness characteristics are not usually considered as variable with flow rate. In what follows, three conditions for flow are considered: Uniform flow, where flow characteristics do not vary along the length of a channel Gradually varied flow, where flow responds to an obstruction or change in channel conditions with a gradual adjustment in flow depth Rapidly varied flow, where an abrupt channel transition results in a rapid change in water surface, the most important case of which is the hydraulic jump 5.1 An important dimensionless quantity For open channel flow, given a channel shape and flow rate, flow can usually exist at two different depths, termed subcritical (slow, deep) and supercritical (shallow, fast). The exception is at critical flow conditions, where only one depth exists, the critical depth. Which of these depths is exhibited by the flow is determined by the slope and roughness of the channel. The Froude number characterizes whether flow is critical, supercritical or subcritical, and is defined by Equation (5.1) \\[\\begin{equation} Fr=\\frac{V}{\\sqrt{gD}} \\tag{5.1} \\end{equation}\\] The Froude number characterizes flow as: Fr Condition Description &lt;1.0 subcritical slow, deep =1.0 critical undulating, transitional &gt;1.0 supercritical fast, shallow Critical flow is important in open-channel flow applications and is discussed further below. 5.2 Equations for open channel flow Flow conditions in an open channel under uniform flow conditions are often related by the Manning equation (5.2). \\[\\begin{equation} Q=A\\frac{C}{n}{R}^{\\frac{2}{3}}{S}^{\\frac{1}{2}} \\tag{5.2} \\end{equation}\\] In Equation (5.2), C is 1.0 for SI units and 1.49 for Eng (British Gravitational, English., or U.S. Customary) units. Q is the flow rate, A is the cross-sectional flow area, n is the Manning roughness coefficient, S is the longitudinal channel slope, and R is the hydraulic radius, defined by equation (5.3) \\[\\begin{equation} R=\\frac{A}{P} \\tag{5.3} \\end{equation}\\] where P is the wetted perimeter. Critical depth is defined by the relation (at critical conditions) in Equation (5.4) \\[\\begin{equation} \\frac{Q^{2}B}{g\\,A^{3}}=1 \\tag{5.4} \\end{equation}\\] where B is the width of the water surface (top width). Because of the channel geometry being included in A and R, it helps to work with specific shapes in adapting these equations. The two most common are trapezoidal and circular, included in Sections 5.3 and 5.4 below. As with pipe flow, the energy equation applies for one dimensional open channel flow as well, Equation (5.5): \\[\\begin{equation} \\frac{V_1^2}{2g}+y_1+z_1=\\frac{V_2^2}{2g}+y_2+z_2+h_L \\tag{5.5} \\end{equation}\\] where point 1 is upstream of point 2, V is the flow velocity, y is the flow depth, and z is the elevation of the channel bottom. \\(h_L\\) is the energy head loss from point 1 to point 2. For uniform flow, \\(h_L\\) is the drop in elevation between the two points due to the channel slope. 5.3 Trapezoidal channels In engineering applications one of the most common channel shapes is trapezoidal. Figure 5.1: Typical symmetrical trapezoidal cross section The geometrical relationships for a trapezoid are: \\[\\begin{equation} A=(b+my)y \\tag{5.6} \\end{equation}\\] \\[\\begin{equation} P=b+2y\\sqrt{1+m^2} \\tag{5.7} \\end{equation}\\] Combining Equations (5.6) and (5.7) yields: \\[\\begin{equation} R=\\frac{A}{P}=\\frac{\\left(b+my\\right)y}{b+2y\\sqrt{1+m^2}} \\tag{5.8} \\end{equation}\\] Top width: \\(B=b+2\\,m\\,y\\). Substituting Equations (5.6) and (5.8) into the Manning equation produces Equation (5.9). \\[\\begin{equation} Q=\\frac{C}{n}{\\frac{\\left(by+my^2\\right)^{\\frac{5}{3}}}{\\left(b+2y\\sqrt{1+m^2}\\right)^\\frac{2}{3}}}{S}^{\\frac{1}{2}} \\tag{5.9} \\end{equation}\\] 5.3.1 Solving the Manning equation in R To solve Equation (5.9) when any variable other than Q is unknown, it is straightforward to rearrange it to a form of y(x) = 0. \\[\\begin{equation} Q-\\frac{C}{n}{\\frac{\\left(by+my^2\\right)^{\\frac{5}{3}}}{\\left(b+2y\\sqrt{1+m^2}\\right)^\\frac{2}{3}}}{S}^{\\frac{1}{2}}=0 \\tag{5.10} \\end{equation}\\] This allows the use of a standard solver to find the root(s). If solving it by hand, trial and error can be employed as well. Example 5.1 demonstrates the solution of Equation (5.10) for the flow depth, y. A trial-and-error approach can be applied, and with careful selection of guesses a solution can be obtained relatively quickly. Using solvers makes the process much quicker and less prone to error. Example 5.1 Find the flow depth, y, for a trapezoidal channel with Q=225 ft3/s, n=0.016, m=2, b=10 ft, S=0.0006. The Manning equation can be set up as a function in terms of a missing variable, here using normal depth, y as the missing variable. yfun &lt;- function(y) { Q - (((y * (b + m * y)) ^ (5 / 3) * sqrt(S)) * (C / n) / ((b + 2 * y * sqrt(1 + m ^ 2)) ^ (2 / 3))) } Because these use US Customary (or English) units, C=1.486. Define all of the needed input variables for the function. Q &lt;- 225. n &lt;- 0.016 m &lt;- 2 b &lt;- 10.0 S &lt;- 0.0006 C &lt;- 1.486 Use the R function uniroot to find a single root within a defined interval. Set the interval (the range of possible y values in which to search for a root) to cover all plausible values, here from 0.0001 mm to 200 m. ans &lt;- uniroot(yfun, interval = c(0.0000001, 200), extendInt = &quot;yes&quot;) cat(sprintf(&quot;Normal Depth: %.3f ft\\n&quot;, ans$root)) #&gt; Normal Depth: 3.406 ft Functions can usually be given multiple values as input, returning the corresponding values of output. this allows plots to be created to show, for example, how the left side of Equation (5.10) varies with different values of depth, y. ys &lt;- seq(0.1, 5, 0.1) plot(ys,yfun(ys), type=&#39;l&#39;, xlab = &quot;y, ft&quot;, ylab = &quot;Function to solve for zero&quot;) abline(h=0) grid() This validates the result in the example, showing the root of Equation (5.10), when the function has a value of 0, occurs for a depth, y of a little less than 3.5. 5.3.2 Solving the Manning equation with the hydraulics R package The hydraulics package has a manningt (the ‘t’ is for ‘trapezoid’) function for trapezoidal channels. Example 5.2 demonstrates its usage. Example 5.2 Find the uniform (normal) flow depth, y, for a trapezoidal channel with Q=225 ft3/s, n=0.016, m=2, b=10 ft, S=0.0006. Specifying “Eng” units ensures the correct C value is used. Sf is the same as S in Equations (5.2) and (5.9) since flow is uniform. ans &lt;- hydraulics::manningt(Q = 225., n = 0.016, m = 2, b = 10., Sf = 0.0006, units = &quot;Eng&quot;) cat(sprintf(&quot;Normal Depth: %.3f ft\\n&quot;, ans$y)) #&gt; Normal Depth: 3.406 ft #critical depth is also returned, along with other variables. cat(sprintf(&quot;Critical Depth: %.3f ft\\n&quot;, ans$yc)) #&gt; Critical Depth: 2.154 ft 5.3.3 Solving the Manning equation using a spreadsheet like Excel Spreadsheet software is very popular and has been modified to be able to accomplish many technical tasks such as solving equations. This example uses Excel with its solver add-in activated, though other spreadsheet software has similar solver add-ins that can be used. The first step is to enter the input data, for the same example as above, along with an initial guess for the variable you wish to solve for. The equation for which a root will be determined is typed in using the initial guess for y in this case. At this point you could use a trial-and-error approach and simply try different values for y until the equation produces something close to 0. A more efficient method is to use a solver. Check that the solver add-in is activated (in Options) and open it. Set the values appropriately. Click Solve and the y value that produces a zero for the equation will appear. If you need to solve for multiple roots, you will need to start from different initial guesses. 5.3.4 Optimal trapezoidal geometry Most fluid mechanics texts that include open channel flow include a derivation of optimal geometry for a trapezoidal channel. This is also called the most efficient cross section. What this means is for a given A and m, there is an optimal flow depth and bottom width for the channel, defined by Equations (5.11) and (5.12). \\[\\begin{equation} b_{opt}=2y\\left(\\sqrt{1+m^2}-m\\right) \\tag{5.11} \\end{equation}\\] \\[\\begin{equation} y_{opt}=\\sqrt{\\frac{A}{2\\sqrt{1+m^2}-m}} \\tag{5.12} \\end{equation}\\] These may be calculated manually, but they are also returned by the manningt function of the hydraulics package in R. Example 5.3 demonstrates this. Example 5.3 Find the optimal channel width to transmit 360 ft3/s at a depth of 3 ft with n=0.015, m=1, S=0.0006. ans &lt;- hydraulics::manningt(Q = 360., n = 0.015, m = 1, y = 3.0, Sf = 0.00088, units = &quot;Eng&quot;) knitr::kable(format(as.data.frame(ans), digits = 2), format = &quot;pipe&quot;, padding=0) Q V A P R y b m Sf B n yc Fr Re bopt 360 5.3 68 28 2.4 3 20 1 0.00088 26 0.015 2.1 0.57 1159705 4.8 cat(sprintf(&quot;Optimal bottom width: %.5f ft\\n&quot;, ans$bopt)) #&gt; Optimal bottom width: 4.76753 ft The results show that, aside from the rounding, the required width is approximately 20 ft, and the optimal bottom width for optimal hydraulic efficiency would be 4.76 ft. To check the depth that would be associated with a channel of the optimal width, substitute the optimal width for b and solve for y: ans &lt;- hydraulics::manningt(Q = 360., n = 0.015, m = 1, b = 4.767534, Sf = 0.00088, units = &quot;Eng&quot;) cat(sprintf(&quot;Optimal depth: %.5f ft\\n&quot;, ans$yopt)) #&gt; Optimal depth: 5.75492 ft 5.4 Circular Channels (flowing partially full) Civil engineers encounter many situations with circular pipes that are flowing only partially full, such as storm and sanitary sewers. Figure 5.2: Typical circular cross section The relationships between the depth of water and the values needed in the Manning equation are: Depth (or fractional depth as written here) is described by Equation (5.13) \\[\\begin{equation} \\frac{y}{D}=\\frac{1}{2}\\left(1-\\cos{\\frac{\\theta}{2}}\\right) \\tag{5.13} \\end{equation}\\] Area is described by Equation (5.14) \\[\\begin{equation} A=\\left(\\frac{\\theta-\\sin{\\theta}}{8}\\right)D^2 \\tag{5.14} \\end{equation}\\] (Be sure to use theta in radians.) Wetted perimeter is described by Equation (5.15) \\[\\begin{equation} P=\\frac{D\\theta}{2} \\tag{5.15} \\end{equation}\\] Combining Equations (5.14) and (5.15): \\[\\begin{equation} R=\\frac{D}{4}\\left(1-\\frac{\\sin{\\theta}}{\\theta}\\right) \\tag{5.16} \\end{equation}\\] Top width: \\(B=D\\,sin{\\frac{\\theta}{2}}\\) Substituting Equations (5.14) and (5.16) into the Manning equation, Equation (5.2), produces (5.17). \\[\\begin{equation} \\theta^{-\\frac{2}{3}}\\left(\\theta-\\sin{\\theta}\\right)^\\frac{5}{3}-CnQD^{-\\frac{8}{3}}S^{-\\frac{1}{2}}=0 \\tag{5.17} \\end{equation}\\] where C=20.16 for SI units and C=13.53 for US Customary (English) units. 5.4.1 Solving the Manning equation for a circular pipe in R As was demonstrated with pipe flow, a function could be written with Equation (5.17) and a solver applied to find the value of \\(\\theta\\) for the given flow conditions with a known D, S, n and Q. The value for \\(\\theta\\) could then be used with Equations (5.13), (5.14) and (5.15) to recover geometric values. The R package hydraulics has implemented those routines to enable these calculations. For an existing pipe, a common problem is the determination of the depth, y that a given flow Q, will have given a pipe diameter d, slope S and roughness n. Example 5.4 demonstrates this. Example 5.4 Find the uniform (normal) flow depth, y, for a trapezoidal channel with Q=225 ft3/s, n=0.016, m=2, b=10 ft, S=0.0006. The function manningc from the hydraulics package is used. Any one of the variables in the Manning equation, and related geometric variables, may be treated as an unknown. ans &lt;- hydraulics::manningc(Q=0.01, n=0.013, Sf=0.001, d = 0.2, units=&quot;SI&quot;, ret_units = TRUE) knitr::kable(format(as.data.frame(ans), digits = 2), format = &quot;pipe&quot;, padding=0) Q V A P R y d Sf n yc Fr Re Qf 0.01 [m^3/s] 0.38 [m/s] 0.027 [m^2] 0.44 [m] 0.061 [m] 0.16 [m] 0.2 [m] 0.001 [1] 0.013 [1] 0.085 [m] 0.3 [1] 22343 [1] 0.01 [m^3/s] It is also sometimes convenient to see a cross-section diagram. hydraulics::xc_circle(y = ans$y, d=ans$d, units = &quot;SI&quot;) 5.5 Critical flow Critical flow in open channel flow is described in general by Equation (5.4). For any channel geometry and flow rate a convenient plot is a specific energy diagram, which illustrates the different flow depths that can occur for any given specific energy. Specific energy is defined by Equation (5.18). \\[\\begin{equation} E=y+\\frac{V^2}{2g} \\tag{5.18} \\end{equation}\\] It can be interpreted as the total energy head, or energy per unit weight, relative to the channel bottom. For a trapezoidal channel, critical flow conditions occur as described by Equation (5.4). Combining that with trapezoidal geometry produces Equation (5.19) \\[\\begin{equation} \\frac{Q^2}{g}=\\frac{\\left(by_c+m{y_c}^2\\right)^3}{b+2my_c} \\tag{5.19} \\end{equation}\\] where \\(y_c\\) indicates critical flow depth. This is important for understanding what may happen to the water surface when flow encounters an obstacle or transition. For the channel of Example 5.3, the diagram is hydraulics::spec_energy_trap( Q = 360, b = 20, m = 1, scale = 4, units = &quot;Eng&quot; ) This provides an illustration that for y=3 ft the flow is subcritical (above the critical depth). Specific energy for the conditions of the prior example is \\[E=y+\\frac{V^2}{2g}=3.0+\\frac{5.22^2}{2*32.2}=3.42 ft\\] If the channel bottom had an abrupt rise of \\(E-E_c=3.42-3.03=0.39 ft\\) critical depth would occur over the hump. A rise of anything greater than that would cause damming to occur. Once flow over a hump is critical, downstream of the hump the flow will be in supercritical conditions, flowing at the alternate depth. The specific energy for a given depth y and alternate depth can be added to the plot by including an argument for depth, y. hydraulics::spec_energy_trap( Q = 360, b = 20, m = 1, scale = 4, y=3.0, units = &quot;Eng&quot; ) 5.6 Gradually varied steady flow When water approaches an obstacle, it can back up, with its depth increasing. The effect can be observed well upstream. Similarly, as water approaches a drop, such as with a waterfall, the water level declines, and that effect can also be seen upstream. In general, any change in slope or roughness will produce changes in depth along a channel length. There are three depths that are important to define for a channel: \\(y_c\\), critical depth, found using Equation (5.4) \\(y_0\\), normal depth, found using Equation (5.2) \\(y\\), flow depth, found using Equation (5.5) If \\(y_n &lt; y_c\\) flow is supercritical (for example, flowing down a steep slope); if \\(y_n &gt; y_c\\) flow is subcritical. Variations in the water surface are classified by profile types based on to whether the normal flow is subcritical (or mild sloped, M) or supercritical (steep, S), as in Figure 5.3 (Davidian, Jacob 1984). Figure 5.3: Types of flow profiles on mild and steep slopes In addition to channel transitions, changes in channel slow of roughness (Manning n) will cause the flow surface to vary. Some of these conditions are illustrated in Figure 5.4 (Davidian, Jacob 1984). Figure 5.4: Types of flow profiles with changes in slope or roughness Typically, for supercritical flow the calculations start at an upstream cross section and move downstream. For subcritical flow calculations proceed upstream. However, for the direct step method, a negative result will indicate upstream, and a positive result indicates downstream. If the water surface passes through critical depth (from supercritical to subcritical or the reverse) it is no longer gradually varied flow and the methods in this section do not apply. This can happen at abrupt changes in channel slope or roughness, or channel transitions. 5.6.1 The direct step method The direct step method looks at two cross sections in a channel where depths, \\(y_1\\) and \\(y_2\\) are defined. The distance between these two cross-sections, \\({\\Delta}X\\), is calculated using Equation (5.20) \\[\\begin{equation} {\\Delta}X=\\frac{E_1-E_2}{\\overline{S}-S_0} \\tag{5.20} \\end{equation}\\] Where E is the specific energy from Equation (5.18), \\(S_0\\) is the slope of the channel bed, and \\(S\\) is the slope of the energy grade line. \\(\\overline{S}\\) is the average of the S values at each cross section calculated using the Manning equation, Equation (5.2) solved for slope, as in Equation (5.21). \\[\\begin{equation} S=\\frac{n^2\\,V^2}{C^2\\,R^{\\frac{4}{3}}} \\tag{5.21} \\end{equation}\\] Example 5.5 demonstrates this. Example 5.5 Water flows at 10 m3/s in a trapezoidal channel with n=0.015, bottom width 3 m, side slope of 2:1 (H:V) and longitudinal slope 0.0009 (0.09%). At the location of a USGS stream gage the flow depth is 1.4 m. Use the direct step method to find the distance to the point where the depth is 1.2 m and determine whether it is upstream or downstream. Begin by setting up a function to calculate the Manning slope and setting up the input data. #function to calculate Manning slope slope_f &lt;- function(V,n,R,C) { return(V^2*n^2/(C^2*R^(4./3.))) } #Now set up input data ################################## #input Flow Q=10.0 #input depths: y1 &lt;- 1.4 #starting depth y2 &lt;- 1.2 #final depth #Define the number of steps into which the difference in y will be broken nsteps &lt;- 2 #channel geometry: bottom_width &lt;- 3 side_slope &lt;- 2 #side slope is H:V. Use zero for rectangular manning_n &lt;- 0.015 long_slope &lt;- 0.0009 units &lt;- &quot;SI&quot; #&quot;SI&quot; or &quot;Eng&quot; if (units == &quot;SI&quot;) { C &lt;- 1 #Manning constant: 1 for SI, 1.49 for US units g &lt;- 9.81 } else { #&quot;Eng&quot; means English, or US system C &lt;- 1.49 g &lt;- 32.2 } #find depth increment for each step, depths at which to solve depth_incr &lt;- (y2 - y1) / nsteps depths &lt;- seq(from=y1, to=y2, by=depth_incr) First check to see if the flow is subcritical or supercritical and find the normal depth. Critical and normal depths can be calculated using the manningt function in the hydraulics package, as in Example 5.2. However, because other functionality of the rivr package is used, these will be calculated using functions from the rivr package. rivr::critical_depth(Q = Q, yopt = y1, g = g, B = bottom_width , SS = side_slope) #&gt; [1] 0.8555011 #note using either depth for yopt produces the same answer rivr::normal_depth(So = long_slope, n = manning_n, Q = Q, yopt = y1, Cm = C, B = bottom_width , SS = side_slope) #&gt; [1] 1.147137 The normal depth is greater than the critical depth, so the channel has a mild slope. The beginning and ending depths are above normal depth. This indicates the profile type, following Figure 5.3, is M-1, so the flow depth should decrease in depth going upstream. This also verifies that the flow depth between these two points does not pass through critical flow, so is a valid gradually varied flow problem. For each increment the \\({\\Delta}X\\) value needs to be calculated, and they need to be accumulated to find the total length, L, between the two defined depths. #loop through each channel segment (step), calculating the length for each segment. #The channel_geom function from the rivr package is helpful L &lt;- 0 for ( i in 1:nsteps ) { #find hydraulic geometry, E and Sf at first depth xc1 &lt;- rivr::channel_geom(y=depths[i], B=bottom_width, SS=side_slope) V1 &lt;- Q/xc1[[&#39;A&#39;]] R1 &lt;- xc1[[&#39;R&#39;]] E1 &lt;- depths[i] + V1^2/(2*g) Sf1 &lt;- slope_f(V1,manning_n,R1,C) #find hydraulic geometry, E and Sf at second depth xc2 &lt;- rivr::channel_geom(y=depths[i+1], B=bottom_width, SS=side_slope) V2 &lt;- Q/xc2[[&#39;A&#39;]] R2 &lt;- xc2[[&#39;R&#39;]] E2 &lt;- depths[i+1] + V2^2/(2*g) Sf2 &lt;- slope_f(V2,manning_n,R2,C) Sf_avg &lt;- (Sf1 + Sf2) / 2.0 dX &lt;- (E1 - E2) / (Sf_avg - long_slope) L &lt;- L + dX } cat(sprintf(&quot;Using %d steps, total distance from depth %.2f to %.2f = %.2f m\\n&quot;, nsteps, y1, y2, L)) #&gt; Using 2 steps, total distance from depth 1.40 to 1.20 = -491.75 m The result is negative, verifying that the location of depth y2 is upstream of y1. Of course, the result will become more precise as more incremental steps are included, as shown in Figure 5.5 Figure 5.5: Variation of number of calculation steps to final calculated distance. The direct step method is also implemented in the hydraulics package, and can be applied to the same problem as above, as illustrated in Example 5.6. Example 5.6 Water flows at 10 m3/s in a trapezoidal channel with n=0.015, bottom width 3 m, side slope of 2:1 (H:V) and longitudinal slope 0.0009 (0.09%). At the location of a USGS stream gage the flow depth is 1.4 m. Use the direct step method to find the distance to the point where the depth is 1.2 m and determine whether it is upstream or downstream. hydraulics::direct_step(So=0.0009, n=0.015, Q=10, y1=1.4, y2=1.2, b=3, m=2, nsteps=2, units=&quot;SI&quot;) #&gt; y1=1.400, y2=1.200, yn=1.147, yc=0.855585 #&gt; Profile type = M1 #&gt; # A tibble: 3 × 7 #&gt; x z y A Sf E Fr #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 0 0 1.4 8.12 0.000407 1.48 0.405 #&gt; 2 -192. 0.173 1.3 7.28 0.000548 1.40 0.466 #&gt; 3 -492. 0.443 1.2 6.48 0.000753 1.32 0.541 This produces the same result, and verifies that the water surface profile is type M-1. 5.6.2 Standard step method The standard step method works similarly to the direct step method, except from one known depth the second depth is determined at a known distance, L. This is a preferred method when the depth at a critical location, such as a bridge, is needed. The rivr package implements the standard step method in its compute_profile function. To compare it to the direct step method, check the depth at \\(y_2\\) given the total distance from Example 5.5. Example 5.7 For the same channel and flow rate as Example 5.5, determine the depth of water at the distance L determined above. The function requires the distance to be positive, so apply the absolute value to the L value. dist = abs(L) ans &lt;- rivr::compute_profile(So = long_slope, n = manning_n, Q = Q, y0 = y1, Cm = C, g = g, B = bottom_width, SS = side_slope, stepdist = dist/nsteps, totaldist = dist) #Distances along the channel where depths were determined ans$x #&gt; [1] 0.0000 -245.8742 -491.7483 #Depths at each distance ans$y #&gt; [1] 1.400000 1.277009 1.200592 This shows the distances and depths at each of the steps defined. Consistent with the above, the distances are negative, showing that they are progressing upstream. The results are identical for \\(y_2\\) using the direct step method. 5.7 Rapidly varied flow (the hydraulic jump) Figure 5.6: A hydraulic jump at St. Anthony Falls, Minnesota. In the discussion of critical flow in Section 5.5, the concept of alternate depths was introduced, where a given flow rate in a channel with known geometry typically may assume two possible values, one subcritical and one supercritical. For the case of supercritical flow transitioning to subcritical flow, a smooth transition is impossible, so a hydraulic jump occurs. A hydraulic jump always dissipates some of the incoming energy. A hydraulic jump is depicted in Figure 5.7 (Peterka, Alvin J. 1978). Figure 5.7: A typical hydraulic jump. 5.7.1 Sequent (or conjugate) depths The two depths on either side of a hydraulic jump are called sequent depths or conjugate depths. The relationship between them can be established using the momentum equation to develop an general expression (for any open channel) for the momentum function, M, as in Equation (5.22). \\[\\begin{equation} M=Ah_c+\\frac{Q^2}{gA} \\tag{5.22} \\end{equation}\\] where \\(h_c\\) is the distance from the water surface to the centroid of the channel cross-section. For a trapezoidal channel, the momentum equation becomes that described by Equation (5.23). \\[\\begin{equation} M=\\frac{by^2}{2}+\\frac{my^3}{3}+\\frac{Q^2}{gy\\left(b+my\\right)} \\tag{5.23} \\end{equation}\\] For the case of a rectangular channel, setting m=0 and setting the Momentum function for two sequent depths, y1 ans y2 equal, produces the relationship in Equation (5.24). \\[\\begin{equation} \\frac{y_2}{y_1}=\\frac{1}{2}\\left(-1+\\sqrt{1+8Fr_1^2}\\right) or \\frac{y_1}{y_2}=\\frac{1}{2}\\left(-1+\\sqrt{1+8Fr_2^2}\\right) \\tag{5.24} \\end{equation}\\] where Frn is the Froude Number [Equation (5.1)] at section n. Again, for the case of a rectangular channel, the energy head loss through a hydraulic jump simplifies to Equation (5.25). \\[\\begin{equation} h_l=\\frac{\\left(y_2-y_1\\right)^3}{4y_1y_2} \\tag{5.25} \\end{equation}\\] Given that the momentum function must be conserved on either side of a hydraulic jump, finding the sequent depth for any known depth becomes straightforward for trapezoidal shapes. Setting M1 = M2 in Equation (5.23) allows the use of a solver, as in Example 5.8. Example 5.8 A trapezoidal channel with a bottom width of 0.5 m and a side slope of 1:1 carries a flow of 0.2 m3/s. The depth on one side of a hydraulic jump is 0.1 m. Find the sequent depth, the energy head loss, and the power dissipation in Watts. flow &lt;- 0.2 ans &lt;- hydraulics::sequent_depth(Q=flow,b=0.5,y=0.1,m=1,units = &quot;SI&quot;, ret_units = TRUE) #print output of function as.data.frame(ans) #&gt; y y_seq yc Fr Fr_seq E #&gt; 1 0.1 [m] 0.3941009 [m] 0.217704 [m] 3.635731 [1] 0.3465538 [1] 0.666509 [m] #&gt; E_seq #&gt; 1 0.4105265 [m] #Find energy head loss hl &lt;- abs(ans$E - ans$E_seq) hl #&gt; 0.2559825 [m] #Express this as a power loss gamma &lt;- hydraulics::specwt(units = &quot;SI&quot;) P &lt;- gamma*flow*hl cat(sprintf(&quot;Power loss = %.1f Watts\\n&quot;,P)) #&gt; Power loss = 501.4 Watts The energy loss across hydraulic jumps varies with the Froude number of the incoming flow, as shown in depicted in Figure 5.8 (Peterka, Alvin J. 1978). Figure 5.8: Types of hydraulic jumps. 5.7.2 Location of a hydraulic jump In hydraulic infrastructure where hydraulic jumps will occur there are usually engineered features, such as baffles or basins, to force a hydraulic jump to occur in specific locations, to protect downstream waterways from the turbulent effects of an uncontrolled hydraulic jump. In the absence of engineered features to cause a jump, the location of a hydraulic jump can be determined using the concepts of Sections 5.6 and 5.7. Example 5.9 demonstrates the determination of the location of a hydraulic jump when normal flow conditions exist at some distance upstream and downstream of the jump. Example 5.9 A rectangular (a trapezoid with side slope, m=0) concrete channel with a bottom width of 3 m carries a flow of 8 m3/s. The upstream channel slopes steeply at So=0.018 and discharges onto a mild slope of So=0.0015. Determine the height of the jump and its location. First find the normal depth on each slope, and the critical depth for the channel. yn1 &lt;- hydraulics::manningt(Q = 8, n = 0.013, m = 0, Sf = 0.018, b = 3, units = &quot;SI&quot;)$y yn2 &lt;- hydraulics::manningt(Q = 8, n = 0.013, m = 0, Sf = 0.0015, b = 3, units = &quot;SI&quot;)$y yc &lt;- hydraulics::manningt(Q = 8, n = 0.013, m = 0, Sf = 0.0015, b = 3, units = &quot;SI&quot;)$yc cat(sprintf(&quot;yn1 = %.3f m, yn2 = %.3f m, yc = %.3f m\\n&quot;, yn1, yn2, yc)) #&gt; yn1 = 0.498 m, yn2 = 1.180 m, yc = 0.898 m Recall that the calculation of yc only depends on flow and channel geometry (Q, b, m), so the values of n and Sf can be arbitrary for that command. These results confirm that flow is supercritical upstream and subcritical downstream, so a hydraulic jump will occur. The hydraulic jump will either begin at yn1 (and jump to the sequent depth for yn1) or end at yn2 (beginning at the sequent depth for yn2). The possibilities are shown in Figure 5.3 in the lower right panel. First check the two sequent depths. yn1_seq &lt;- hydraulics::sequent_depth(Q = 8, b = 3, y=yn1, m = 0, units = &quot;SI&quot;)$y_seq yn2_seq &lt;- hydraulics::sequent_depth(Q = 8, b = 3, y=yn2, m = 0, units = &quot;SI&quot;)$y_seq cat(sprintf(&quot;yn1_seq = %.3f m, yn2_seq = %.3f m\\n&quot;, yn1_seq, yn2_seq)) #&gt; yn1_seq = 1.476 m, yn2_seq = 0.666 m This confirms that if the jump began at yn1 (on the steep slope) it would need to jump a level below yn2, with an S-1 curve providing the gradual increase in depth to yn2. Since yn1_seq exceeds yn2, this is not possible. That can be verified using the direct_step function to show the distance from yn1_seq to yn2 would need to be upstream (negative x values in the result), which cannot occur for this case. This means the alternate case must exist, with an M-3 profile raising yn1 to yn2_seq at which point the jump occurs. The direct step method can find this distance along the channel. hydraulics::direct_step(So=0.0015, n=0.013, Q=8, y1=yn1, y2=yn2_seq, b=3, m=0, nsteps=2, units=&quot;SI&quot;) #&gt; # A tibble: 3 × 7 #&gt; x z y A Sf E Fr #&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 0 0 0.498 1.49 0.0180 1.96 2.42 #&gt; 2 23.4 -0.0350 0.582 1.75 0.0113 1.65 1.92 #&gt; 3 44.6 -0.0669 0.666 2.00 0.00761 1.48 1.57 The number of calculation steps (nsteps) can be increased for greater precision, but 2 steps is adequate here. "],["momentum-in-water-flow.html", "Chapter 6 Momentum in water flow 6.1 Equations of linear momentum 6.2 The momentum equation in pipe design", " Chapter 6 Momentum in water flow When moving water changes direction or velocity, an external force must be associated with the change. In civil engineering infrastructure this is ubiquitous and the forces associated with this must be accounted for in design. Figure 6.1: Water pipe on Capitol Hill, Seattle. 6.1 Equations of linear momentum Newton’s law relates the forces applied to a body to the rate of change of linear momentum, as in Equation (6.1) \\[\\begin{equation} \\sum{\\overrightarrow{F}}=\\frac{d\\left(m\\overrightarrow{V}\\right)}{dt} \\tag{6.1} \\end{equation}\\] For fluid flow in a hydraulic system carrying a flow Q, the equation can be written in any linear direction (x-direction in this example) as in Equation (6.2). \\[\\begin{equation} \\sum{F_x}=\\rho{Q}\\left(V_{2x}-V_{1x}\\right) \\tag{6.2} \\end{equation}\\] where \\(\\rho{Q}\\) is the mass flux through the system, \\(V_{1x}\\) is the velocity in the x-direction where flow enters the system, and \\(V_{2x}\\) is the velocity in the x-direction where flow leaves the system. \\(\\sum{F_x}\\) is the vector sum of all external forces acting on the system in the x-direction. It should be noted that the values of V are the average cross-sectional velocity. A momentum correction factor (\\(\\beta\\)), can be applied when the velocity is highly non-uniform across the cross-section. In nearly all civil engineering applications the adjustment factor is close enough to 1 where it is ignored in the calculations. 6.2 The momentum equation in pipe design One of the most common civil engineering applications of the momentum equation is providing the lateral restraint where a pipe bend occurs. One approach to provide the external force to keep the pipe in equilibrium is to use a thrust block, as illustrated in Figure 6.2 (Ductile Iron Pipe Research Association 2016). Figure 6.2: A sketch of a pipe bend with a thrust block. Example 4.1 An horizontal 18-inch diameter pipe carries flow Q of water at 68\\(^\\circ\\)F with a pressure of 60 psi and encounters a bend of angle \\(\\theta=30^\\circ\\). Show how the reaction force, R varies with the flow rate through the bend for flows up to 20 ft3/s. Ignore head loss through the bend. Taking the control volume to be the bend, the external forces acting on the bend are shown in Figure 6.3. Figure 6.3: External forces on the pipe. Note that if the pipe were not horizontal, the weight of the water in the pipe would also need to be included. Including all of the external forces in the x-direction on left side of Equation (6.2) and recognizing that V1x=V1 and V2x=V2cos\\(\\theta\\) produces: \\[P_1A_1-P_2A_2cos\\theta-R_x=\\rho{Q}\\left(V_{2}cos\\theta-V_{1}\\right)\\] Rearranging to solve for Rx gives Equation (6.3). \\[\\begin{equation} R_x=P_1A_1-P_2A_2cos\\theta-\\rho{Q}\\left(V_{2}cos\\theta-V_{1}\\right) \\tag{6.3} \\end{equation}\\] Similarly in the y-direction Equation (6.4) can be assembled, noting that V1y=0 and V2y=\\(-\\)V2sin\\(\\theta\\) . \\[\\begin{equation} R_y=P_2A_2sin\\theta-\\rho{Q}\\left(-V_{2}sin\\theta\\right) \\tag{6.4} \\end{equation}\\] This can be set up in R in many ways, such as the following. #Input Data -- ensure units are consistent in ft, lbf (pound force), sec D1 &lt;- units::set_units(18/12, ft) D2 &lt;- units::set_units(18/12, ft) P1 &lt;- units::set_units(60*144, lbf/ft^2) #convert psi to lbf/ft^2 P2 &lt;- units::set_units(60*144, lbf/ft^2) theta &lt;- 30*(pi/180) #convert to radians for sin, cos functions rho &lt;- hydraulics::dens(T=68, units=&quot;Eng&quot;, ret_units = TRUE) # calculations - vary flow from 0 to 20 ft^3/s Q &lt;- units::set_units(seq(0,20,1), ft^3/s) A1 &lt;- pi/4*D1^2 A2 &lt;- pi/4*D2^2 V1 &lt;- Q/A1 V2 &lt;- Q/A2 Rx &lt;- P1*A1-P2*A2*cos(theta)-rho*Q*(V2*cos(theta)-V1) Ry &lt;- P2*A2*sin(theta)-rho*Q*(-V2*sin(theta)) R &lt;- sqrt(Rx^2 + Ry^2) plot(Q,R) When Q=0, only the pressure terms contribute to R. This plot shows that for typical water main conditions the change in direction of the velocity vectors adds a small amount (less than 3% in this example) to the calculated R value. This is why design guidelines for water mains often neglect the velocity term in Equation (6.2). In other industrial or laboratory conditions it may not be valid to neglect that term. "],["pumps-and-how-they-operate-in-a-hydraulic-system.html", "Chapter 7 Pumps and how they operate in a hydraulic system 7.1 Defining the system curve 7.2 Defining the pump characteristic curve 7.3 Finding the operating point", " Chapter 7 Pumps and how they operate in a hydraulic system For any system delivering water through circular pipes with the assistance of a pump, the selection of the pump requires a consideration of both the pump characteristics and the energy required to deliver different flow rates through the system. These are described by the system and pump characteristic curves. Where they intersect defines the operating point, the flow and (energy) head at which the pump would operate in that system. 7.1 Defining the system curve Figure 7.1: A simple hydraulic system (from https://www.castlepumps.com) For a simple system the loss of head (energy per unit weight) due to friction, \\(h_f\\), is described by the Darcy-Weisbach equation, which can be simplified as in Equation (7.1). \\[\\begin{equation} h_f = \\frac{fL}{D}\\frac{V^2}{2g} = \\frac{8fL}{\\pi^{2}gD^{5}}Q^{2} = KQ{^2} \\tag{7.1} \\end{equation}\\] The total dynamic head the system requires a pump to provide, \\(h_p\\), is found by solving the energy equation from the upstream reservoir (point 1) to the downstream reservoir (point 2), as in Equation (7.2). \\[\\begin{equation} h_p = \\left(z+\\frac{P}{\\gamma}+\\frac{V^2}{2g}\\right)_2 - \\left(z+\\frac{P}{\\gamma}+\\frac{V^2}{2g}\\right)_1+h_f \\tag{7.2} \\end{equation}\\] For the simple system in Figure 7.1, the velocity can be considered negligible in both reservoirs 1 and 2, and the pressures at both reservoirs is atmospheric, so the Equation (7.2) can be simplified to (7.3). \\[\\begin{equation} h_p = \\left(z_2 - z_1\\right) + h_f=h_s+h_f=h_s+KQ^2 \\tag{7.3} \\end{equation}\\] Using the hydraulics package, the coefficient, K, can be calculated manually or using other package functions for friction loss in a pipe system using \\(Q=1\\). Using this to develop a system curve is demonstrated in Example 7.1. Example 7.1 Develop a system curve for a pipe with a diameter of 20 inches, length of 3884 ft, and absolute roughness of 0.0005 ft. Use kinematic viscocity, \\(\\nu\\) = 1.23 x 10-5 ft2/s. Assume a static head, z2 - z1 = 30 ft. ans &lt;- hydraulics::darcyweisbach(Q = 1,D = 20/12, L = 3884, ks = 0.0005, nu = 1.23e-5, units = &quot;Eng&quot;) cat(sprintf(&quot;Coefficient K: %.3f\\n&quot;, ans$hf)) #&gt; Coefficient K: 0.160 scurve &lt;- hydraulics::systemcurve(hs = 30, K = ans$hf, units = &quot;Eng&quot;) print(scurve$eqn) #&gt; [1] &quot;h == 30 + 0.16*Q^2&quot; For this function of the hydraulics package, Q is either in ft\\(^3\\)/s or m\\(^3\\)/s, depending on whether Eng or SI is specified for units. Often data for flows in pumping systems are in other units such as gpm or liters/s, so unit conversions would need to be applied. 7.2 Defining the pump characteristic curve The pump characteristic curve is based on data or graphs obtained from a pump manufacturer, such as that depicted in Figure 7.2. Figure 7.2: A sample set of pump curves (from https://www.gouldspumps.com). The three red dots are points selected to approximate the curve The three selected points, selected manually across the range of the curve, are used to generate a polynomial fit to the curve. There are many forms of equations that could be used to fit these three points to a smooth, continuous curve. Three common ones are implemented in the hydraulics package, shown in Table 7.1. Table 7.1: Common equation forms for pump characteristic curves. type Equation poly1 \\(h=a+{b}{Q}+{c}{Q}^2\\) poly2 \\(h=a+{c}{Q}^2\\) poly3 \\(h_{shutoff}+{c}{Q}^2\\) The \\(h_{shutoff}\\) value is the pump head at \\(Q={0}\\). Many methods can be used to fit a polynomial to a set of points. The hydraulics package includes the pumpcurve function for this purpose. The coordinates of the points can be input as numeric vectors, being careful to use correct units, consistent with those used for the system curve. Manufacturer’s pump curves often use units for flow that are not what the hydraulics package needs, and the units package provides a convenient way to convert them as needed. Developing the pump characteristic curve using the hydraulics package is demonstrated in Example 7.2. Example 7.2 Develop a pump characteristic curve for the pump in Figure 7.2, using the three points marked in red. Use the poly2 form from Table 7.1. qgpm &lt;- units::set_units(c(0, 5000, 7850), gallons/minute) #Convert units to those needed for package, and consistent with system curve qcfs &lt;- units::set_units(qgpm, ft^3/s) #Head units, read from the plot, are already in ft so setting units is not needed hft &lt;- c(81, 60, 20) pcurve &lt;- hydraulics::pumpcurve(Q = qcfs, h = hft, eq = &quot;poly2&quot;, units = &quot;Eng&quot;) print(pcurve$eqn) #&gt; [1] &quot;h == 82.5 - 0.201*Q^2&quot; The function pumpcurve returns a pumpcurve object that includes the polynomial fit equation and a simple plot to check the fit. This can be plotted as in Figure 7.3 pcurve$p Figure 7.3: A pump characteristic curve 7.3 Finding the operating point The two curves can be combined to find the operating point of the selected pump in the defined system. this can be done by plotting them manually, solving the equations simultaneously, or by using software. The hydraulics package finds the operating point using the system and pump curves defined earlier. Example 7.3 shown how this is done. Example 7.3 Find the operating point for the pump and system curves developed in Examples 7.1 and 7.2. oppt &lt;- hydraulics::operpoint(pcurve = pcurve, scurve = scurve) cat(sprintf(&quot;Operating Point: Q = %.3f, h = %.3f\\n&quot;, oppt$Qop, oppt$hop)) #&gt; Operating Point: Q = 12.051, h = 53.285 The function operpoint function returns an operpoint object that includes the a plot of both curves. This can be plotted as in Figure 7.4 oppt$p Figure 7.4: The pump operating point "],["references.html", "References", " References "]]
